{"version":3,"sources":["webpack:///./node_modules/xmldom/dom-parser.js","webpack:///./node_modules/xmldom/dom.js","webpack:///./src/parser/missing-index-parser.ts","webpack:///./src/parser/meta-info-parser.ts","webpack:///./src/parser/warnings-parser.ts","webpack:///./src/parser/tag-and-parser.ts","webpack:///./src/parser/object-parser.ts","webpack:///./src/parser/scalar-expression-parser.ts","webpack:///./src/parser/seek-predicate-parser.ts","webpack:///./src/parser/rel-op-parser.ts","webpack:///./src/parser/query-plan-parser.ts","webpack:///./src/parser/statement-parser.ts","webpack:///./src/parser/showplan-parser.ts","webpack:///./node_modules/xmldom/sax.js"],"names":["DOMParser","options","this","locator","buildErrorHandler","errorImpl","domBuilder","DOMHandler","errorHandler","isCallback","Function","build","key","fn","length","msg","_locator","cdata","position","node","lineNumber","columnNumber","l","systemId","_toString","chars","start","substr","java","lang","String","appendElement","hander","currentElement","appendChild","doc","prototype","parseFromString","source","mimeType","sax","XMLReader","defaultNSMap","xmlns","entityMap","lt","gt","amp","quot","apos","setDocumentLocator","test","nbsp","copy","xml","parse","error","startDocument","DOMImplementation","createDocument","documentURI","startElement","namespaceURI","localName","qName","attrs","el","createElementNS","len","i","getURI","value","getValue","attr","getQName","createAttributeNS","getLocator","nodeValue","setAttributeNode","endElement","current","tagName","parentNode","startPrefixMapping","prefix","uri","endPrefixMapping","processingInstruction","target","data","ins","createProcessingInstruction","ignorableWhitespace","ch","characters","apply","arguments","charNode","createCDATASection","createTextNode","skippedEntity","name","endDocument","normalize","comment","comm","createComment","startCDATA","endCDATA","startDTD","publicId","impl","implementation","createDocumentType","dt","warning","console","warn","fatalError","replace","__webpack_require__","exports","XMLSerializer","src","dest","p","_extends","Class","Super","pt","Object","create","ppt","__proto__","t","constructor","htmlns","NodeType","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","ExceptionCode","ExceptionMessage","HIERARCHY_REQUEST_ERR","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","NOT_FOUND_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","INUSE_ATTRIBUTE_ERR","NOT_SUPPORTED_ERR","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","DOMException","code","message","Error","call","captureStackTrace","NodeList","LiveNodeList","refresh","_node","_refresh","_updateLiveList","list","inc","_inc","ownerDocument","ls","__set__","NamedNodeMap","_findNodeIndex","_addNamedNode","newAttr","oldAttr","ownerElement","_onRemoveAttribute","_onAddAttribute","_removeNamedNode","lastIndex","features","_features","feature","Node","_xmlEncoder","c","charCodeAt","_visitNode","callback","firstChild","nextSibling","Document","ns","_nsMap","remove","_onUpdateChild","newChild","cs","childNodes","child","_removeChild","previous","previousSibling","next","lastChild","_insertBefore","nextChild","cp","removeChild","nodeType","newFirst","newLast","pre","_appendSingleChild","Element","Attr","CharacterData","Text","Comment","CDATASection","DocumentType","Notation","Entity","EntityReference","DocumentFragment","ProcessingInstruction","nodeSerializeToString","isHtml","nodeFilter","buf","refNode","documentElement","lookupPrefix","visibleNamespaces","namespace","serializeToString","join","needNamespaceDefine","isHTML","push","attributes","nodeName","item","pubid","sysid","sub","internalSubset","importNode","deep","node2","cloneNode","n","v","attrs2","_ownerElement","object","index","toString","getNamedItem","setNamedItem","setNamedItemNS","getNamedItemNS","removeNamedItem","removeNamedItemNS","hasFeature","version","versions","toLowerCase","qualifiedName","doctype","root","insertBefore","refChild","replaceChild","oldChild","hasChildNodes","appendData","isSupported","hasAttributes","map","lookupNamespaceURI","isDefaultNamespace","importedNode","getElementById","id","rtv","getAttribute","createElement","createDocumentFragment","createAttribute","specified","createEntityReference","pl","split","hasAttribute","getAttributeNode","setAttribute","removeAttribute","removeAttributeNode","setAttributeNodeNS","removeAttributeNS","old","getAttributeNodeNS","hasAttributeNS","getAttributeNS","setAttributeNS","getElementsByTagName","base","getElementsByTagNameNS","substringData","offset","count","substring","text","insertData","replaceData","deleteData","end","splitText","newText","newNode","defineProperty","getTextContent","get","$$length","set","e","missing_index_parser_MissingIndexParser","MissingIndexParser","ParseMissingIndexes","element","_this","missingIndexGroupElements","query_helper","GetImmediateChildNodesByTagName","missingIndexGroups","ParseMissingIndexGroup","showplan","impact","parser_convert","GetFloat","missingIndexElements","missingIndexes","ParseMissingIndex","database","GetString","schema","table","columnGroupElements","columnGroups","ParseColumnGroup","usage","columnElements","columns","ParseColumn","columnId","GetInt","missing_index_parser","meta_info_parser_MetaInfoParser","MetaInfoParser","ParseThreadStat","parseThreadReservation","threadElement","nodeId","reservationThreads","branches","threadStat","UsedThreads","GetIntOrUndefined","threadReservationElements","ThreadReservation","ParseMemoryGrantInfo","serialRequiredMemory","serialDesiredMemory","memoryGrant","RequiredMemory","DesiredMemory","RequestedMemory","GrantWaitTime","GrantedMemory","MaxUsedMemory","MaxQueryMemory","ParseOptimizerHardwareDependentProperties","estimatedAvailableMemoryGrant","estimatedPagesCached","props","EstimatedAvailableDegreeOfParallelism","MaxCompileMemory","ParseOptimizerStatsUsage","parseStatisticsInfo","statElement","statistics","modificationCount","samplingPercent","stats","LastUpdate","GetDateOrUndefined","Database","GetStringOrUndefined","Schema","statInfoElements","statInfo","ParseWaitStats","parseWaitStat","waitElement","waitType","waitTimeMs","waitCount","waitElements","Wait","ParseQueryTimeStats","cpuTime","elapsedTime","ParseRunTimeInformation","parsePerThread","threadId","actualRows","actualEndOfScans","actualExecutions","perThread","ActualCPUms","ActualElapsedms","ActualLobLogicalReads","ActualLobPhysicalReads","ActualLobReadAheads","ActualLocallyAggregatedRows","ActualLogicalReads","ActualPhysicalReads","ActualReadAheads","ActualRebinds","ActualRewinds","ActualRowsRead","ActualScans","ActualJoinType","runTimeCountersPerThread","ParseAllItems","undefined","filter","Thread","meta_info_parser","warnings_parser_WarningsParser","WarningsParser","ParseWarnings","warnings","ColumnsWithNoStatistics","ColumnReferenceParser","GetAllFromElement","SpillToTempDb","ParseSpillToTempDb","ParseWait","PlanAffectingConvert","ParsePlanAffectingConvert","SortSpillDetails","ParseSortSpillDetails","HashSpillDetails","ParseHashSpillDetails","MemoryGrantWarning","ParseMemoryGrantWarning","NoJoinPredicate","GetBooleanOrUndefined","SpatialGuess","UnmatchedIndexes","FullUpdateForOnlineIndexBuild","spill","SpillLevel","SpilledThreadCount","type","convertIssue","expression","details","GrantedMemoryKb","ReadsFromTempDb","UsedMemoryKb","WritesToTempDb","kind","requestedMemory","grantedMemory","maxUsedMemory","column_reference_parser","warnings_parser","TagAndParser","TagName","Action","tag_and_parser","object_parser_ObjectParser","ObjectParser","Parse","Server","Table","Index","Filtered","Alias","TableReferenceId","IndexKind","CloneAccessScope","Storage","object_parser","scalar_expression_parser_ScalarExpressionParser","ScalarExpressionParser","relOpParser","scalarExpressionElement","scalarOperation","operation","ParseScalarType","scalarElement","operationOp","parsers","ParseAggregate","ParseArithmetic","ParseAssign","ParseCompare","ParseConst","ParseConvert","ParseIdentifier","ParseConditional","ParseIntrinsic","ParseLogical","ParseMultiAssign","ParseScalarExpressionList","ParseSequence","ParseSubquery","ParseUDTMethod","ParseUserDefinedAggregate","ParseUDF","GetAllImmediateChildNodes","parser","scalar","ScalarString","aggType","distinct","GetBoolean","aggregate","operators","ScalarOperator","scalarOperators","columnReferenceElement","scalarOperator","compareOp","scalarOps","constValue","dataType","precision","scale","style","implicit","convert","Length","Precision","Scale","ident","ColumnReference","condition","then","$else","functionName","scalarOperatorElements","intrinsic","assignElements","assigns","relOp","subquery","udtMethod","clrFunctionElements","CLRFunction","ParseCLRFunction","aggObjectElement","UDAggObject","udf","IsClrFunction","assembly","$class","method","clrFunction","Assembly","Method","scalar_expression_parser","seek_predicate_parser_SeekPredicateParser","SeekPredicateParser","scalarExpressionParser","scalarExpresionParser","ParseSeekPredicates","seekPredicates","seekPredicateElements","SeekPredicate","ParseSeekPredicate","seekPredicateNewElements","SeekPredicateNew","ParseSeekPredicateNew","seekPredicate","prefixElement","Prefix","ParseScanRangeType","startRangeElement","StartRange","endRangeElement","EndRange","seekKeyElements","seekKeys","ParseSeekPredicatePart","seekPredicateNew","scanType","rangeExpressionElements","rangeColumns","rangeExpressions","seek_predicate_parser","rel_op_parser_RelOpParser","RelOpParser","ParseRelOp","parentRelOp","relOpElement","action","actionElement","tagsAndParsers","ParseAdaptiveJoin","ParseFilterElement","ParseBatchHashTableBuild","ParseBitmap","ParseCollapse","ParseComputeScalar","ParseConstantScan","ParseConcat","ParseCreateIndex","ParseRowSet","ParseUDX","ParseForeignKeyReferencesCheckType","ParseGeneric","ParseHash","ParseRelOpBaseType","ParseMerge","ParseSimpleIteratorOneChild","ParseNestedLoop","ParseParallelism","ParsePut","ParseRemoteFetch","ParseRemoteModify","ParseRemoteQuery","ParseRemoteRange","ParseRemote","ParseSpool","ParseScalarInsert","ParseSegment","ParseSimpleUpdate","ParseSort","ParseSplit","ParseStreamAggregate","ParseSwitch","ParseTableScan","ParseTableValuedFunction","ParseTopElement","ParseTopSort","ParseUpdate","ParseIndexScan","ParseWindow","ParseWindowAggregate","_i","tagsAndParsers_1","tagAndParser","definedValuesElement","definedValueElements","DefinedValues","ParseDefinedValue","avgRowSize","EstimateCPU","EstimatedTotalSubtreeCost","EstimateIO","EstimateRebinds","EstimateRewinds","EstimateRows","LogicalOp","NodeId","Parallel","PhysicalOp","columnReferenceList","thisOp","AdaptiveThresholdRows","GetFloatOrUndefined","EstimatedJoinType","Warnings","ParseSingleItem","RunTimeInformation","ParentRelOp","childOpElements","RelOp","scan","$switch","predicateElements","Predicate","objectElement","hashkeys","parseForeignKeyReferenceCheckElements","fkElement","indexScanElements","indexScan","foreignKeyReferenceCheckElements","foreignKeyReferenceCheck","check","ForeignKeyReferencesCount","NoMatchingIndexCount","PartialMatchingIndexCount","optimized","nestedLoop","PassThru","WithOrderedPrefetch","WithUnorderedPrefetch","OuterReferences","op","BitmapCreator","actionColumns","ActionColumn","udx","UsedUDXColumns","groupBy","segmentColumns","insert","setPredicateElements","SetPredicate","parseSetPredicateElementType","DMLRequestSort","update","seekPredicateElement","seekPredicateNewElement","spool","Stack","PrimaryNodeId","orderByElement","orderByColumnElements","orderBy","parseOrderByColumn","ascending","columnReference","rows","sort","WithTies","tvf","parameterListElements","scalarElements","scalars","ParameterList","merge","InnerSideJoinColumns","OuterSideJoinColumns","residualElement","Residual","passThruElement","starJoinElement","StarJoinInfo","ParseStarJoinInfo","ManyToMany","adaptiveJoin","HashKeysBuild","HashKeysProbe","buildResidualElement","BuildResidual","probeElement","ProbeResidual","partitionIdElement","PartitionId","stream","GroupBy","rollupElements","highestLevel","rollupLevelElements","rollUpInfos","level","RollupInfo","definedValue","columnReferenceElements","ordered","indexViewInfoElement","objects","IndexedViewInfo","ForcedIndex","ForceScan","NoExpandHint","predicateElement","SetPredicateType","probeColumnElement","column","ProbeColumn","actionColumnElement","originalActionColumnElement","OriginalActionColumn","hash","filterElement","startUpExpression","toUpperCase","IsAssert","ComputeSequence","parallelism","InRow","LocalParallelism","Remoting","PartitioningType","HashKeys","PartitionColumns","OrderBy","topElement","isPercent","rowCount","withTies","topExpressionElements","top","IsPercent","RowCount","Rows","TopExpression","SeekPredicates","Lookup","ScanDirection","DynamicSeek","operationType","starJoin","Root","ApplyRemoteAttributes","creator","remote","RemoteDestination","RemoteSource","RemoteObject","range","modify","query","RemoteQuery","ShuffleColumn","ShuffleType","rel_op_parser","query_plan_parser_QueryPlanParser","QueryPlanParser","queryPlanElement","relOpElements","queryplan","MissingIndexes","ThreadStat","MemoryGrant","MemoryGrantInfo","OptimizerHardwareDependentProperties","OptimizerStatsUsage","WaitStats","QueryTimeStats","CachedPlanSize","DegreeOfParallelism","query_plan_parser","statement_parser_StatementParser","StatementParser","ParseUseDb","ParseStmtSimple","statement","queryPlan","storedProc","QueryPlan","UDF","StoredProc","ParseStoredProc","statement_parser","showplan_parser_ShowPlanParser","ShowPlanParser","ForOnlyElementsInNodes","nodes","results","resultsIndex","nodeIndex","childNodeIndex","childNode","result","BuildRoot","batches","GetBatchFromElement","batchElement","statementElements","BatchSqlHandle","CardinalityEstimationModelVersion","DatabaseContextSettingsId","ParameterizedPlanHandle","ParameterizedText","ParentObjectId","PlanGuideDB","PlanGuideName","QueryHash","QueryPlanHash","RetrievedFromCache","SecurityPolicyApplied","StatementCompId","StatementEstRows","StatementId","StatementOptmEarlyAbortReason","StatementOptmLevel","StatementParameterizationType","StatementSqlHandle","StatementSubTreeCost","StatementText","StatementType","TemplatePlanGuideDB","TemplatePlanGuideName","setOptions","StatementSetOptions","s","dom_parser","w","batchElements","statements","batchStatements","Array","batch","__webpack_exports__","nameStartChar","nameChar","RegExp","slice","tagNamePattern","S_TAG","S_ATTR","S_ATTR_SPACE","S_EQ","S_ATTR_NOQUOT_VALUE","S_ATTR_END","S_TAG_SPACE","S_TAG_CLOSE","defaultNSMapCopy","fixedFromCharCode","surrogate1","surrogate2","fromCharCode","entityReplacer","a","k","charAt","parseInt","appendText","xt","m","lineEnd","linePattern","exec","lineStart","parseStack","currentNSMap","closeMap","tagStart","indexOf","match","config","pop","localNSMap","endMatch","endIgnoreCaseMach","parseInstruction","parseDCC","ElementAttributes","parseElementStartPart","closed","fixSelfClosed","locator2","copyLocator","parseHtmlSpecialContent","Math","max","f","attrName","add","setTagName","nsp","nsPrefix","_copy","elStartEnd","elEndStart","pos","lastIndexOf","matchs","lastMatch","endDTD","_set_proto_","thiz","parent","reg","getLocalName"],"mappings":"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","file":"js/chunk-65d11186.2a9e0469.js","sourcesContent":["function DOMParser(options){\r\n\tthis.options = options ||{locator:{}};\r\n\t\r\n}\r\nDOMParser.prototype.parseFromString = function(source,mimeType){\r\n\tvar options = this.options;\r\n\tvar sax =  new XMLReader();\r\n\tvar domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler\r\n\tvar errorHandler = options.errorHandler;\r\n\tvar locator = options.locator;\r\n\tvar defaultNSMap = options.xmlns||{};\r\n\tvar entityMap = {'lt':'<','gt':'>','amp':'&','quot':'\"','apos':\"'\"}\r\n\tif(locator){\r\n\t\tdomBuilder.setDocumentLocator(locator)\r\n\t}\r\n\t\r\n\tsax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);\r\n\tsax.domBuilder = options.domBuilder || domBuilder;\r\n\tif(/\\/x?html?$/.test(mimeType)){\r\n\t\tentityMap.nbsp = '\\xa0';\r\n\t\tentityMap.copy = '\\xa9';\r\n\t\tdefaultNSMap['']= 'http://www.w3.org/1999/xhtml';\r\n\t}\r\n\tdefaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\r\n\tif(source){\r\n\t\tsax.parse(source,defaultNSMap,entityMap);\r\n\t}else{\r\n\t\tsax.errorHandler.error(\"invalid doc source\");\r\n\t}\r\n\treturn domBuilder.doc;\r\n}\r\nfunction buildErrorHandler(errorImpl,domBuilder,locator){\r\n\tif(!errorImpl){\r\n\t\tif(domBuilder instanceof DOMHandler){\r\n\t\t\treturn domBuilder;\r\n\t\t}\r\n\t\terrorImpl = domBuilder ;\r\n\t}\r\n\tvar errorHandler = {}\r\n\tvar isCallback = errorImpl instanceof Function;\r\n\tlocator = locator||{}\r\n\tfunction build(key){\r\n\t\tvar fn = errorImpl[key];\r\n\t\tif(!fn && isCallback){\r\n\t\t\tfn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;\r\n\t\t}\r\n\t\terrorHandler[key] = fn && function(msg){\r\n\t\t\tfn('[xmldom '+key+']\\t'+msg+_locator(locator));\r\n\t\t}||function(){};\r\n\t}\r\n\tbuild('warning');\r\n\tbuild('error');\r\n\tbuild('fatalError');\r\n\treturn errorHandler;\r\n}\r\n\r\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\r\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler \r\n * \r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\r\nfunction DOMHandler() {\r\n    this.cdata = false;\r\n}\r\nfunction position(locator,node){\r\n\tnode.lineNumber = locator.lineNumber;\r\n\tnode.columnNumber = locator.columnNumber;\r\n}\r\n/**\r\n * @see org.xml.sax.ContentHandler#startDocument\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n */ \r\nDOMHandler.prototype = {\r\n\tstartDocument : function() {\r\n    \tthis.doc = new DOMImplementation().createDocument(null, null, null);\r\n    \tif (this.locator) {\r\n        \tthis.doc.documentURI = this.locator.systemId;\r\n    \t}\r\n\t},\r\n\tstartElement:function(namespaceURI, localName, qName, attrs) {\r\n\t\tvar doc = this.doc;\r\n\t    var el = doc.createElementNS(namespaceURI, qName||localName);\r\n\t    var len = attrs.length;\r\n\t    appendElement(this, el);\r\n\t    this.currentElement = el;\r\n\t    \r\n\t\tthis.locator && position(this.locator,el)\r\n\t    for (var i = 0 ; i < len; i++) {\r\n\t        var namespaceURI = attrs.getURI(i);\r\n\t        var value = attrs.getValue(i);\r\n\t        var qName = attrs.getQName(i);\r\n\t\t\tvar attr = doc.createAttributeNS(namespaceURI, qName);\r\n\t\t\tthis.locator &&position(attrs.getLocator(i),attr);\r\n\t\t\tattr.value = attr.nodeValue = value;\r\n\t\t\tel.setAttributeNode(attr)\r\n\t    }\r\n\t},\r\n\tendElement:function(namespaceURI, localName, qName) {\r\n\t\tvar current = this.currentElement\r\n\t\tvar tagName = current.tagName;\r\n\t\tthis.currentElement = current.parentNode;\r\n\t},\r\n\tstartPrefixMapping:function(prefix, uri) {\r\n\t},\r\n\tendPrefixMapping:function(prefix) {\r\n\t},\r\n\tprocessingInstruction:function(target, data) {\r\n\t    var ins = this.doc.createProcessingInstruction(target, data);\r\n\t    this.locator && position(this.locator,ins)\r\n\t    appendElement(this, ins);\r\n\t},\r\n\tignorableWhitespace:function(ch, start, length) {\r\n\t},\r\n\tcharacters:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t\t//console.log(chars)\r\n\t\tif(chars){\r\n\t\t\tif (this.cdata) {\r\n\t\t\t\tvar charNode = this.doc.createCDATASection(chars);\r\n\t\t\t} else {\r\n\t\t\t\tvar charNode = this.doc.createTextNode(chars);\r\n\t\t\t}\r\n\t\t\tif(this.currentElement){\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t}else if(/^\\s*$/.test(chars)){\r\n\t\t\t\tthis.doc.appendChild(charNode);\r\n\t\t\t\t//process xml\r\n\t\t\t}\r\n\t\t\tthis.locator && position(this.locator,charNode)\r\n\t\t}\r\n\t},\r\n\tskippedEntity:function(name) {\r\n\t},\r\n\tendDocument:function() {\r\n\t\tthis.doc.normalize();\r\n\t},\r\n\tsetDocumentLocator:function (locator) {\r\n\t    if(this.locator = locator){// && !('lineNumber' in locator)){\r\n\t    \tlocator.lineNumber = 0;\r\n\t    }\r\n\t},\r\n\t//LexicalHandler\r\n\tcomment:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t    var comm = this.doc.createComment(chars);\r\n\t    this.locator && position(this.locator,comm)\r\n\t    appendElement(this, comm);\r\n\t},\r\n\t\r\n\tstartCDATA:function() {\r\n\t    //used in characters() methods\r\n\t    this.cdata = true;\r\n\t},\r\n\tendCDATA:function() {\r\n\t    this.cdata = false;\r\n\t},\r\n\t\r\n\tstartDTD:function(name, publicId, systemId) {\r\n\t\tvar impl = this.doc.implementation;\r\n\t    if (impl && impl.createDocumentType) {\r\n\t        var dt = impl.createDocumentType(name, publicId, systemId);\r\n\t        this.locator && position(this.locator,dt)\r\n\t        appendElement(this, dt);\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * @see org.xml.sax.ErrorHandler\r\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n\t */\r\n\twarning:function(error) {\r\n\t\tconsole.warn('[xmldom warning]\\t'+error,_locator(this.locator));\r\n\t},\r\n\terror:function(error) {\r\n\t\tconsole.error('[xmldom error]\\t'+error,_locator(this.locator));\r\n\t},\r\n\tfatalError:function(error) {\r\n\t\tconsole.error('[xmldom fatalError]\\t'+error,_locator(this.locator));\r\n\t    throw error;\r\n\t}\r\n}\r\nfunction _locator(l){\r\n\tif(l){\r\n\t\treturn '\\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'\r\n\t}\r\n}\r\nfunction _toString(chars,start,length){\r\n\tif(typeof chars == 'string'){\r\n\t\treturn chars.substr(start,length)\r\n\t}else{//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\r\n\t\tif(chars.length >= start+length || start){\r\n\t\t\treturn new java.lang.String(chars,start,length)+'';\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n}\r\n\r\n/*\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n * used method of org.xml.sax.ext.LexicalHandler:\r\n *  #comment(chars, start, length)\r\n *  #startCDATA()\r\n *  #endCDATA()\r\n *  #startDTD(name, publicId, systemId)\r\n *\r\n *\r\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n *  #endDTD()\r\n *  #startEntity(name)\r\n *  #endEntity(name)\r\n *\r\n *\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n * IGNORED method of org.xml.sax.ext.DeclHandler\r\n * \t#attributeDecl(eName, aName, type, mode, value)\r\n *  #elementDecl(name, model)\r\n *  #externalEntityDecl(name, publicId, systemId)\r\n *  #internalEntityDecl(name, value)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n * IGNORED method of org.xml.sax.EntityResolver2\r\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n *  #resolveEntity(publicId, systemId)\r\n *  #getExternalSubset(name, baseURI)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n * IGNORED method of org.xml.sax.DTDHandler\r\n *  #notationDecl(name, publicId, systemId) {};\r\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n */\r\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){\r\n\tDOMHandler.prototype[key] = function(){return null}\r\n})\r\n\r\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\r\nfunction appendElement (hander,node) {\r\n    if (!hander.currentElement) {\r\n        hander.doc.appendChild(node);\r\n    } else {\r\n        hander.currentElement.appendChild(node);\r\n    }\r\n}//appendChild and setAttributeNS are preformance key\r\n\r\n//if(typeof require == 'function'){\r\n\tvar XMLReader = require('./sax').XMLReader;\r\n\tvar DOMImplementation = exports.DOMImplementation = require('./dom').DOMImplementation;\r\n\texports.XMLSerializer = require('./dom').XMLSerializer ;\r\n\texports.DOMParser = DOMParser;\r\n//}\r\n","/*\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n */\n\nfunction copy(src,dest){\n\tfor(var p in src){\n\t\tdest[p] = src[p];\n\t}\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */\nfunction _extends(Class,Super){\n\tvar pt = Class.prototype;\n\tif(Object.create){\n\t\tvar ppt = Object.create(Super.prototype)\n\t\tpt.__proto__ = ppt;\n\t}\n\tif(!(pt instanceof Super)){\n\t\tfunction t(){};\n\t\tt.prototype = Super.prototype;\n\t\tt = new t();\n\t\tcopy(pt,t);\n\t\tClass.prototype = pt = t;\n\t}\n\tif(pt.constructor != Class){\n\t\tif(typeof Class != 'function'){\n\t\t\tconsole.error(\"unknow Class:\"+Class)\n\t\t}\n\t\tpt.constructor = Class\n\t}\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml' ;\n// Node Types\nvar NodeType = {}\nvar ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;\nvar ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;\nvar TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;\nvar CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;\nvar ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;\nvar ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;\nvar DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;\nvar DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;\nvar DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;\nvar NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;\n\n// ExceptionCode\nvar ExceptionCode = {}\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]=\"Index size error\"),1);\nvar DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]=\"DOMString size error\"),2);\nvar HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]=\"Hierarchy request error\"),3);\nvar WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]=\"Wrong document\"),4);\nvar INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]=\"Invalid character\"),5);\nvar NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]=\"No data allowed\"),6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]=\"No modification allowed\"),7);\nvar NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]=\"Not found\"),8);\nvar NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]=\"Not supported\"),9);\nvar INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]=\"Attribute in use\"),10);\n//level2\nvar INVALID_STATE_ERR        \t= ExceptionCode.INVALID_STATE_ERR        \t= ((ExceptionMessage[11]=\"Invalid state\"),11);\nvar SYNTAX_ERR               \t= ExceptionCode.SYNTAX_ERR               \t= ((ExceptionMessage[12]=\"Syntax error\"),12);\nvar INVALID_MODIFICATION_ERR \t= ExceptionCode.INVALID_MODIFICATION_ERR \t= ((ExceptionMessage[13]=\"Invalid modification\"),13);\nvar NAMESPACE_ERR            \t= ExceptionCode.NAMESPACE_ERR           \t= ((ExceptionMessage[14]=\"Invalid namespace\"),14);\nvar INVALID_ACCESS_ERR       \t= ExceptionCode.INVALID_ACCESS_ERR      \t= ((ExceptionMessage[15]=\"Invalid access\"),15);\n\n\nfunction DOMException(code, message) {\n\tif(message instanceof Error){\n\t\tvar error = message;\n\t}else{\n\t\terror = this;\n\t\tError.call(this, ExceptionMessage[code]);\n\t\tthis.message = ExceptionMessage[code];\n\t\tif(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n\t}\n\terror.code = code;\n\tif(message) this.message = this.message + \": \" + message;\n\treturn error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode,DOMException)\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */\nfunction NodeList() {\n};\nNodeList.prototype = {\n\t/**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */\n\tlength:0, \n\t/**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long \n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index. \n\t */\n\titem: function(index) {\n\t\treturn this[index] || null;\n\t},\n\ttoString:function(isHTML,nodeFilter){\n\t\tfor(var buf = [], i = 0;i<this.length;i++){\n\t\t\tserializeToString(this[i],buf,isHTML,nodeFilter);\n\t\t}\n\t\treturn buf.join('');\n\t}\n};\nfunction LiveNodeList(node,refresh){\n\tthis._node = node;\n\tthis._refresh = refresh\n\t_updateLiveList(this);\n}\nfunction _updateLiveList(list){\n\tvar inc = list._node._inc || list._node.ownerDocument._inc;\n\tif(list._inc != inc){\n\t\tvar ls = list._refresh(list._node);\n\t\t//console.log(ls.length)\n\t\t__set__(list,'length',ls.length);\n\t\tcopy(ls,list);\n\t\tlist._inc = inc;\n\t}\n}\nLiveNodeList.prototype.item = function(i){\n\t_updateLiveList(this);\n\treturn this[i];\n}\n\n_extends(LiveNodeList,NodeList);\n/**\n * \n * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities \n */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list,node){\n\tvar i = list.length;\n\twhile(i--){\n\t\tif(list[i] === node){return i}\n\t}\n}\n\nfunction _addNamedNode(el,list,newAttr,oldAttr){\n\tif(oldAttr){\n\t\tlist[_findNodeIndex(list,oldAttr)] = newAttr;\n\t}else{\n\t\tlist[list.length++] = newAttr;\n\t}\n\tif(el){\n\t\tnewAttr.ownerElement = el;\n\t\tvar doc = el.ownerDocument;\n\t\tif(doc){\n\t\t\toldAttr && _onRemoveAttribute(doc,el,oldAttr);\n\t\t\t_onAddAttribute(doc,el,newAttr);\n\t\t}\n\t}\n}\nfunction _removeNamedNode(el,list,attr){\n\t//console.log('remove attr:'+attr)\n\tvar i = _findNodeIndex(list,attr);\n\tif(i>=0){\n\t\tvar lastIndex = list.length-1\n\t\twhile(i<lastIndex){\n\t\t\tlist[i] = list[++i]\n\t\t}\n\t\tlist.length = lastIndex;\n\t\tif(el){\n\t\t\tvar doc = el.ownerDocument;\n\t\t\tif(doc){\n\t\t\t\t_onRemoveAttribute(doc,el,attr);\n\t\t\t\tattr.ownerElement = null;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tthrow DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))\n\t}\n}\nNamedNodeMap.prototype = {\n\tlength:0,\n\titem:NodeList.prototype.item,\n\tgetNamedItem: function(key) {\n//\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n//\t\t\treturn null;\n//\t\t}\n\t\t//console.log()\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar attr = this[i];\n\t\t\t//console.log(attr.nodeName,key)\n\t\t\tif(attr.nodeName == key){\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t},\n\tsetNamedItem: function(attr) {\n\t\tvar el = attr.ownerElement;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\tvar oldAttr = this.getNamedItem(attr.nodeName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\t/* returns Node */\n\tsetNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n\t\tvar el = attr.ownerElement, oldAttr;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\toldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\n\t/* returns Node */\n\tremoveNamedItem: function(key) {\n\t\tvar attr = this.getNamedItem(key);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t\t\n\t\t\n\t},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\t\n\t//for level2\n\tremoveNamedItemNS:function(namespaceURI,localName){\n\t\tvar attr = this.getNamedItemNS(namespaceURI,localName);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t},\n\tgetNamedItemNS: function(namespaceURI, localName) {\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar node = this[i];\n\t\t\tif(node.localName == localName && node.namespaceURI == namespaceURI){\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n/**\n * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n */\nfunction DOMImplementation(/* Object */ features) {\n\tthis._features = {};\n\tif (features) {\n\t\tfor (var feature in features) {\n\t\t\t this._features = features[feature];\n\t\t}\n\t}\n};\n\nDOMImplementation.prototype = {\n\thasFeature: function(/* string */ feature, /* string */ version) {\n\t\tvar versions = this._features[feature.toLowerCase()];\n\t\tif (versions && (!version || version in versions)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n\t\tvar doc = new Document();\n\t\tdoc.implementation = this;\n\t\tdoc.childNodes = new NodeList();\n\t\tdoc.doctype = doctype;\n\t\tif(doctype){\n\t\t\tdoc.appendChild(doctype);\n\t\t}\n\t\tif(qualifiedName){\n\t\t\tvar root = doc.createElementNS(namespaceURI,qualifiedName);\n\t\t\tdoc.appendChild(root);\n\t\t}\n\t\treturn doc;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n\t\tvar node = new DocumentType();\n\t\tnode.name = qualifiedName;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.publicId = publicId;\n\t\tnode.systemId = systemId;\n\t\t// Introduced in DOM Level 2:\n\t\t//readonly attribute DOMString        internalSubset;\n\t\t\n\t\t//TODO:..\n\t\t//  readonly attribute NamedNodeMap     entities;\n\t\t//  readonly attribute NamedNodeMap     notations;\n\t\treturn node;\n\t}\n};\n\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */\n\nfunction Node() {\n};\n\nNode.prototype = {\n\tfirstChild : null,\n\tlastChild : null,\n\tpreviousSibling : null,\n\tnextSibling : null,\n\tattributes : null,\n\tparentNode : null,\n\tchildNodes : null,\n\townerDocument : null,\n\tnodeValue : null,\n\tnamespaceURI : null,\n\tprefix : null,\n\tlocalName : null,\n\t// Modified in DOM Level 2:\n\tinsertBefore:function(newChild, refChild){//raises \n\t\treturn _insertBefore(this,newChild,refChild);\n\t},\n\treplaceChild:function(newChild, oldChild){//raises \n\t\tthis.insertBefore(newChild,oldChild);\n\t\tif(oldChild){\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t},\n\tremoveChild:function(oldChild){\n\t\treturn _removeChild(this,oldChild);\n\t},\n\tappendChild:function(newChild){\n\t\treturn this.insertBefore(newChild,null);\n\t},\n\thasChildNodes:function(){\n\t\treturn this.firstChild != null;\n\t},\n\tcloneNode:function(deep){\n\t\treturn cloneNode(this.ownerDocument||this,this,deep);\n\t},\n\t// Modified in DOM Level 2:\n\tnormalize:function(){\n\t\tvar child = this.firstChild;\n\t\twhile(child){\n\t\t\tvar next = child.nextSibling;\n\t\t\tif(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){\n\t\t\t\tthis.removeChild(next);\n\t\t\t\tchild.appendData(next.data);\n\t\t\t}else{\n\t\t\t\tchild.normalize();\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t}\n\t},\n  \t// Introduced in DOM Level 2:\n\tisSupported:function(feature, version){\n\t\treturn this.ownerDocument.implementation.hasFeature(feature,version);\n\t},\n    // Introduced in DOM Level 2:\n    hasAttributes:function(){\n    \treturn this.attributes.length>0;\n    },\n    lookupPrefix:function(namespaceURI){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tfor(var n in map){\n    \t\t\t\tif(map[n] == namespaceURI){\n    \t\t\t\t\treturn n;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI:function(prefix){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tif(prefix in map){\n    \t\t\t\treturn map[prefix] ;\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace:function(namespaceURI){\n    \tvar prefix = this.lookupPrefix(namespaceURI);\n    \treturn prefix == null;\n    }\n};\n\n\nfunction _xmlEncoder(c){\n\treturn c == '<' && '&lt;' ||\n         c == '>' && '&gt;' ||\n         c == '&' && '&amp;' ||\n         c == '\"' && '&quot;' ||\n         '&#'+c.charCodeAt()+';'\n}\n\n\ncopy(NodeType,Node);\ncopy(NodeType,Node.prototype);\n\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */\nfunction _visitNode(node,callback){\n\tif(callback(node)){\n\t\treturn true;\n\t}\n\tif(node = node.firstChild){\n\t\tdo{\n\t\t\tif(_visitNode(node,callback)){return true}\n        }while(node=node.nextSibling)\n    }\n}\n\n\n\nfunction Document(){\n}\nfunction _onAddAttribute(doc,el,newAttr){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tel._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value\n\t}\n}\nfunction _onRemoveAttribute(doc,el,newAttr,remove){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tdelete el._nsMap[newAttr.prefix?newAttr.localName:'']\n\t}\n}\nfunction _onUpdateChild(doc,el,newChild){\n\tif(doc && doc._inc){\n\t\tdoc._inc++;\n\t\t//update childNodes\n\t\tvar cs = el.childNodes;\n\t\tif(newChild){\n\t\t\tcs[cs.length++] = newChild;\n\t\t}else{\n\t\t\t//console.log(1)\n\t\t\tvar child = el.firstChild;\n\t\t\tvar i = 0;\n\t\t\twhile(child){\n\t\t\t\tcs[i++] = child;\n\t\t\t\tchild =child.nextSibling;\n\t\t\t}\n\t\t\tcs.length = i;\n\t\t}\n\t}\n}\n\n/**\n * attributes;\n * children;\n * \n * writeable properties:\n * nodeValue,Attr:value,CharacterData:data\n * prefix\n */\nfunction _removeChild(parentNode,child){\n\tvar previous = child.previousSibling;\n\tvar next = child.nextSibling;\n\tif(previous){\n\t\tprevious.nextSibling = next;\n\t}else{\n\t\tparentNode.firstChild = next\n\t}\n\tif(next){\n\t\tnext.previousSibling = previous;\n\t}else{\n\t\tparentNode.lastChild = previous;\n\t}\n\t_onUpdateChild(parentNode.ownerDocument,parentNode);\n\treturn child;\n}\n/**\n * preformance key(refChild == null)\n */\nfunction _insertBefore(parentNode,newChild,nextChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tcp.removeChild(newChild);//remove and update\n\t}\n\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\tvar newFirst = newChild.firstChild;\n\t\tif (newFirst == null) {\n\t\t\treturn newChild;\n\t\t}\n\t\tvar newLast = newChild.lastChild;\n\t}else{\n\t\tnewFirst = newLast = newChild;\n\t}\n\tvar pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n\tnewFirst.previousSibling = pre;\n\tnewLast.nextSibling = nextChild;\n\t\n\t\n\tif(pre){\n\t\tpre.nextSibling = newFirst;\n\t}else{\n\t\tparentNode.firstChild = newFirst;\n\t}\n\tif(nextChild == null){\n\t\tparentNode.lastChild = newLast;\n\t}else{\n\t\tnextChild.previousSibling = newLast;\n\t}\n\tdo{\n\t\tnewFirst.parentNode = parentNode;\n\t}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))\n\t_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);\n\t//console.log(parentNode.lastChild.nextSibling == null)\n\tif (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n\t\tnewChild.firstChild = newChild.lastChild = null;\n\t}\n\treturn newChild;\n}\nfunction _appendSingleChild(parentNode,newChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tvar pre = parentNode.lastChild;\n\t\tcp.removeChild(newChild);//remove and update\n\t\tvar pre = parentNode.lastChild;\n\t}\n\tvar pre = parentNode.lastChild;\n\tnewChild.parentNode = parentNode;\n\tnewChild.previousSibling = pre;\n\tnewChild.nextSibling = null;\n\tif(pre){\n\t\tpre.nextSibling = newChild;\n\t}else{\n\t\tparentNode.firstChild = newChild;\n\t}\n\tparentNode.lastChild = newChild;\n\t_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);\n\treturn newChild;\n\t//console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n\t//implementation : null,\n\tnodeName :  '#document',\n\tnodeType :  DOCUMENT_NODE,\n\tdoctype :  null,\n\tdocumentElement :  null,\n\t_inc : 1,\n\t\n\tinsertBefore :  function(newChild, refChild){//raises \n\t\tif(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){\n\t\t\tvar child = newChild.firstChild;\n\t\t\twhile(child){\n\t\t\t\tvar next = child.nextSibling;\n\t\t\t\tthis.insertBefore(child,refChild);\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t\treturn newChild;\n\t\t}\n\t\tif(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\t\t\n\t\treturn _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;\n\t},\n\tremoveChild :  function(oldChild){\n\t\tif(this.documentElement == oldChild){\n\t\t\tthis.documentElement = null;\n\t\t}\n\t\treturn _removeChild(this,oldChild);\n\t},\n\t// Introduced in DOM Level 2:\n\timportNode : function(importedNode,deep){\n\t\treturn importNode(this,importedNode,deep);\n\t},\n\t// Introduced in DOM Level 2:\n\tgetElementById :\tfunction(id){\n\t\tvar rtv = null;\n\t\t_visitNode(this.documentElement,function(node){\n\t\t\tif(node.nodeType == ELEMENT_NODE){\n\t\t\t\tif(node.getAttribute('id') == id){\n\t\t\t\t\trtv = node;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn rtv;\n\t},\n\t\n\t//document factory method:\n\tcreateElement :\tfunction(tagName){\n\t\tvar node = new Element();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = tagName;\n\t\tnode.tagName = tagName;\n\t\tnode.childNodes = new NodeList();\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\tcreateDocumentFragment :\tfunction(){\n\t\tvar node = new DocumentFragment();\n\t\tnode.ownerDocument = this;\n\t\tnode.childNodes = new NodeList();\n\t\treturn node;\n\t},\n\tcreateTextNode :\tfunction(data){\n\t\tvar node = new Text();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateComment :\tfunction(data){\n\t\tvar node = new Comment();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateCDATASection :\tfunction(data){\n\t\tvar node = new CDATASection();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateProcessingInstruction :\tfunction(target,data){\n\t\tvar node = new ProcessingInstruction();\n\t\tnode.ownerDocument = this;\n\t\tnode.tagName = node.target = target;\n\t\tnode.nodeValue= node.data = data;\n\t\treturn node;\n\t},\n\tcreateAttribute :\tfunction(name){\n\t\tvar node = new Attr();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.name = name;\n\t\tnode.nodeName\t= name;\n\t\tnode.localName = name;\n\t\tnode.specified = true;\n\t\treturn node;\n\t},\n\tcreateEntityReference :\tfunction(name){\n\t\tvar node = new EntityReference();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.nodeName\t= name;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateElementNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Element();\n\t\tvar pl = qualifiedName.split(':');\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tnode.childNodes = new NodeList();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.tagName = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateAttributeNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Attr();\n\t\tvar pl = qualifiedName.split(':');\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.name = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tnode.specified = true;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\treturn node;\n\t}\n};\n_extends(Document,Node);\n\n\nfunction Element() {\n\tthis._nsMap = {};\n};\nElement.prototype = {\n\tnodeType : ELEMENT_NODE,\n\thasAttribute : function(name){\n\t\treturn this.getAttributeNode(name)!=null;\n\t},\n\tgetAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name);\n\t\treturn attr && attr.value || '';\n\t},\n\tgetAttributeNode : function(name){\n\t\treturn this.attributes.getNamedItem(name);\n\t},\n\tsetAttribute : function(name, value){\n\t\tvar attr = this.ownerDocument.createAttribute(name);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tremoveAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name)\n\t\tattr && this.removeAttributeNode(attr);\n\t},\n\t\n\t//four real opeartion method\n\tappendChild:function(newChild){\n\t\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\t\treturn this.insertBefore(newChild,null);\n\t\t}else{\n\t\t\treturn _appendSingleChild(this,newChild);\n\t\t}\n\t},\n\tsetAttributeNode : function(newAttr){\n\t\treturn this.attributes.setNamedItem(newAttr);\n\t},\n\tsetAttributeNodeNS : function(newAttr){\n\t\treturn this.attributes.setNamedItemNS(newAttr);\n\t},\n\tremoveAttributeNode : function(oldAttr){\n\t\t//console.log(this == oldAttr.ownerElement)\n\t\treturn this.attributes.removeNamedItem(oldAttr.nodeName);\n\t},\n\t//get real attribute name,and remove it by removeAttributeNode\n\tremoveAttributeNS : function(namespaceURI, localName){\n\t\tvar old = this.getAttributeNodeNS(namespaceURI, localName);\n\t\told && this.removeAttributeNode(old);\n\t},\n\t\n\thasAttributeNS : function(namespaceURI, localName){\n\t\treturn this.getAttributeNodeNS(namespaceURI, localName)!=null;\n\t},\n\tgetAttributeNS : function(namespaceURI, localName){\n\t\tvar attr = this.getAttributeNodeNS(namespaceURI, localName);\n\t\treturn attr && attr.value || '';\n\t},\n\tsetAttributeNS : function(namespaceURI, qualifiedName, value){\n\t\tvar attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tgetAttributeNodeNS : function(namespaceURI, localName){\n\t\treturn this.attributes.getNamedItemNS(namespaceURI, localName);\n\t},\n\t\n\tgetElementsByTagName : function(tagName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t},\n\tgetElementsByTagNameNS : function(namespaceURI, localName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t\t\n\t\t});\n\t}\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element,Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr,Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n\tdata : '',\n\tsubstringData : function(offset, count) {\n\t\treturn this.data.substring(offset, offset+count);\n\t},\n\tappendData: function(text) {\n\t\ttext = this.data+text;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t},\n\tinsertData: function(offset,text) {\n\t\tthis.replaceData(offset,0,text);\n\t\n\t},\n\tappendChild:function(newChild){\n\t\tthrow new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])\n\t},\n\tdeleteData: function(offset, count) {\n\t\tthis.replaceData(offset,count,\"\");\n\t},\n\treplaceData: function(offset, count, text) {\n\t\tvar start = this.data.substring(0,offset);\n\t\tvar end = this.data.substring(offset+count);\n\t\ttext = start + text + end;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t}\n}\n_extends(CharacterData,Node);\nfunction Text() {\n};\nText.prototype = {\n\tnodeName : \"#text\",\n\tnodeType : TEXT_NODE,\n\tsplitText : function(offset) {\n\t\tvar text = this.data;\n\t\tvar newText = text.substring(offset);\n\t\ttext = text.substring(0, offset);\n\t\tthis.data = this.nodeValue = text;\n\t\tthis.length = text.length;\n\t\tvar newNode = this.ownerDocument.createTextNode(newText);\n\t\tif(this.parentNode){\n\t\t\tthis.parentNode.insertBefore(newNode, this.nextSibling);\n\t\t}\n\t\treturn newNode;\n\t}\n}\n_extends(Text,CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n\tnodeName : \"#comment\",\n\tnodeType : COMMENT_NODE\n}\n_extends(Comment,CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n\tnodeName : \"#cdata-section\",\n\tnodeType : CDATA_SECTION_NODE\n}\n_extends(CDATASection,CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType,Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation,Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity,Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference,Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName =\t\"#document-fragment\";\nDocumentFragment.prototype.nodeType =\tDOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment,Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction,Node);\nfunction XMLSerializer(){}\nXMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){\n\treturn nodeSerializeToString.call(node,isHtml,nodeFilter);\n}\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml,nodeFilter){\n\tvar buf = [];\n\tvar refNode = this.nodeType == 9?this.documentElement:this;\n\tvar prefix = refNode.prefix;\n\tvar uri = refNode.namespaceURI;\n\t\n\tif(uri && prefix == null){\n\t\t//console.log(prefix)\n\t\tvar prefix = refNode.lookupPrefix(uri);\n\t\tif(prefix == null){\n\t\t\t//isHTML = true;\n\t\t\tvar visibleNamespaces=[\n\t\t\t{namespace:uri,prefix:null}\n\t\t\t//{namespace:uri,prefix:''}\n\t\t\t]\n\t\t}\n\t}\n\tserializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);\n\t//console.log('###',this.nodeType,uri,prefix,buf.join(''))\n\treturn buf.join('');\n}\nfunction needNamespaceDefine(node,isHTML, visibleNamespaces) {\n\tvar prefix = node.prefix||'';\n\tvar uri = node.namespaceURI;\n\tif (!prefix && !uri){\n\t\treturn false;\n\t}\n\tif (prefix === \"xml\" && uri === \"http://www.w3.org/XML/1998/namespace\" \n\t\t|| uri == 'http://www.w3.org/2000/xmlns/'){\n\t\treturn false;\n\t}\n\t\n\tvar i = visibleNamespaces.length \n\t//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)\n\twhile (i--) {\n\t\tvar ns = visibleNamespaces[i];\n\t\t// get namespace prefix\n\t\t//console.log(node.nodeType,node.tagName,ns.prefix,prefix)\n\t\tif (ns.prefix == prefix){\n\t\t\treturn ns.namespace != uri;\n\t\t}\n\t}\n\t//console.log(isHTML,uri,prefix=='')\n\t//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){\n\t//\treturn false;\n\t//}\n\t//node.flag = '11111'\n\t//console.error(3,true,node.flag,node.prefix,node.namespaceURI)\n\treturn true;\n}\nfunction serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){\n\tif(nodeFilter){\n\t\tnode = nodeFilter(node);\n\t\tif(node){\n\t\t\tif(typeof node == 'string'){\n\t\t\t\tbuf.push(node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t\t//buf.sort.apply(attrs, attributeSorter);\n\t}\n\tswitch(node.nodeType){\n\tcase ELEMENT_NODE:\n\t\tif (!visibleNamespaces) visibleNamespaces = [];\n\t\tvar startVisibleNamespaces = visibleNamespaces.length;\n\t\tvar attrs = node.attributes;\n\t\tvar len = attrs.length;\n\t\tvar child = node.firstChild;\n\t\tvar nodeName = node.tagName;\n\t\t\n\t\tisHTML =  (htmlns === node.namespaceURI) ||isHTML \n\t\tbuf.push('<',nodeName);\n\t\t\n\t\t\n\t\t\n\t\tfor(var i=0;i<len;i++){\n\t\t\t// add namespaces for attributes\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (attr.prefix == 'xmlns') {\n\t\t\t\tvisibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });\n\t\t\t}else if(attr.nodeName == 'xmlns'){\n\t\t\t\tvisibleNamespaces.push({ prefix: '', namespace: attr.value });\n\t\t\t}\n\t\t}\n\t\tfor(var i=0;i<len;i++){\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {\n\t\t\t\tvar prefix = attr.prefix||'';\n\t\t\t\tvar uri = attr.namespaceURI;\n\t\t\t\tvar ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n\t\t\t\tbuf.push(ns, '=\"' , uri , '\"');\n\t\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t\t}\n\t\t\tserializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t}\n\t\t// add namespace for current node\t\t\n\t\tif (needNamespaceDefine(node,isHTML, visibleNamespaces)) {\n\t\t\tvar prefix = node.prefix||'';\n\t\t\tvar uri = node.namespaceURI;\n\t\t\tvar ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n\t\t\tbuf.push(ns, '=\"' , uri , '\"');\n\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t}\n\t\t\n\t\tif(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){\n\t\t\tbuf.push('>');\n\t\t\t//if is cdata child node\n\t\t\tif(isHTML && /^script$/i.test(nodeName)){\n\t\t\t\twhile(child){\n\t\t\t\t\tif(child.data){\n\t\t\t\t\t\tbuf.push(child.data);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\t\t\t}\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}else\n\t\t\t{\n\t\t\t\twhile(child){\n\t\t\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf.push('</',nodeName,'>');\n\t\t}else{\n\t\t\tbuf.push('/>');\n\t\t}\n\t\t// remove added visible namespaces\n\t\t//visibleNamespaces.length = startVisibleNamespaces;\n\t\treturn;\n\tcase DOCUMENT_NODE:\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t\treturn;\n\tcase ATTRIBUTE_NODE:\n\t\treturn buf.push(' ',node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');\n\tcase TEXT_NODE:\n\t\treturn buf.push(node.data.replace(/[<&]/g,_xmlEncoder));\n\tcase CDATA_SECTION_NODE:\n\t\treturn buf.push( '<![CDATA[',node.data,']]>');\n\tcase COMMENT_NODE:\n\t\treturn buf.push( \"<!--\",node.data,\"-->\");\n\tcase DOCUMENT_TYPE_NODE:\n\t\tvar pubid = node.publicId;\n\t\tvar sysid = node.systemId;\n\t\tbuf.push('<!DOCTYPE ',node.name);\n\t\tif(pubid){\n\t\t\tbuf.push(' PUBLIC \"',pubid);\n\t\t\tif (sysid && sysid!='.') {\n\t\t\t\tbuf.push( '\" \"',sysid);\n\t\t\t}\n\t\t\tbuf.push('\">');\n\t\t}else if(sysid && sysid!='.'){\n\t\t\tbuf.push(' SYSTEM \"',sysid,'\">');\n\t\t}else{\n\t\t\tvar sub = node.internalSubset;\n\t\t\tif(sub){\n\t\t\t\tbuf.push(\" [\",sub,\"]\");\n\t\t\t}\n\t\t\tbuf.push(\">\");\n\t\t}\n\t\treturn;\n\tcase PROCESSING_INSTRUCTION_NODE:\n\t\treturn buf.push( \"<?\",node.target,\" \",node.data,\"?>\");\n\tcase ENTITY_REFERENCE_NODE:\n\t\treturn buf.push( '&',node.nodeName,';');\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE:\n\tdefault:\n\t\tbuf.push('??',node.nodeName);\n\t}\n}\nfunction importNode(doc,node,deep){\n\tvar node2;\n\tswitch (node.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tnode2 = node.cloneNode(false);\n\t\tnode2.ownerDocument = doc;\n\t\t//var attrs = node2.attributes;\n\t\t//var len = attrs.length;\n\t\t//for(var i=0;i<len;i++){\n\t\t\t//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n\t\t//}\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tbreak;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t\tbreak;\n\t//case ENTITY_REFERENCE_NODE:\n\t//case PROCESSING_INSTRUCTION_NODE:\n\t////case TEXT_NODE:\n\t//case CDATA_SECTION_NODE:\n\t//case COMMENT_NODE:\n\t//\tdeep = false;\n\t//\tbreak;\n\t//case DOCUMENT_NODE:\n\t//case DOCUMENT_TYPE_NODE:\n\t//cannot be imported.\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE：\n\t//can not hit in level3\n\t//default:throw e;\n\t}\n\tif(!node2){\n\t\tnode2 = node.cloneNode(false);//false\n\t}\n\tnode2.ownerDocument = doc;\n\tnode2.parentNode = null;\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(importNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc,node,deep){\n\tvar node2 = new node.constructor();\n\tfor(var n in node){\n\t\tvar v = node[n];\n\t\tif(typeof v != 'object' ){\n\t\t\tif(v != node2[n]){\n\t\t\t\tnode2[n] = v;\n\t\t\t}\n\t\t}\n\t}\n\tif(node.childNodes){\n\t\tnode2.childNodes = new NodeList();\n\t}\n\tnode2.ownerDocument = doc;\n\tswitch (node2.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tvar attrs\t= node.attributes;\n\t\tvar attrs2\t= node2.attributes = new NamedNodeMap();\n\t\tvar len = attrs.length\n\t\tattrs2._ownerElement = node2;\n\t\tfor(var i=0;i<len;i++){\n\t\t\tnode2.setAttributeNode(cloneNode(doc,attrs.item(i),true));\n\t\t}\n\t\tbreak;;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t}\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(cloneNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n\nfunction __set__(object,key,value){\n\tobject[key] = value\n}\n//do dynamic\ntry{\n\tif(Object.defineProperty){\n\t\tObject.defineProperty(LiveNodeList.prototype,'length',{\n\t\t\tget:function(){\n\t\t\t\t_updateLiveList(this);\n\t\t\t\treturn this.$$length;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(Node.prototype,'textContent',{\n\t\t\tget:function(){\n\t\t\t\treturn getTextContent(this);\n\t\t\t},\n\t\t\tset:function(data){\n\t\t\t\tswitch(this.nodeType){\n\t\t\t\tcase ELEMENT_NODE:\n\t\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\t\twhile(this.firstChild){\n\t\t\t\t\t\tthis.removeChild(this.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tif(data || String(data)){\n\t\t\t\t\t\tthis.appendChild(this.ownerDocument.createTextNode(data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//TODO:\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\tthis.value = data;\n\t\t\t\t\tthis.nodeValue = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\tfunction getTextContent(node){\n\t\t\tswitch(node.nodeType){\n\t\t\tcase ELEMENT_NODE:\n\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\tvar buf = [];\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile(node){\n\t\t\t\t\tif(node.nodeType!==7 && node.nodeType !==8){\n\t\t\t\t\t\tbuf.push(getTextContent(node));\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t\treturn buf.join('');\n\t\t\tdefault:\n\t\t\t\treturn node.nodeValue;\n\t\t\t}\n\t\t}\n\t\t__set__ = function(object,key,value){\n\t\t\t//console.log(value)\n\t\t\tobject['$$'+key] = value\n\t\t}\n\t}\n}catch(e){//ie8\n}\n\n//if(typeof require == 'function'){\n\texports.DOMImplementation = DOMImplementation;\n\texports.XMLSerializer = XMLSerializer;\n//}\n","import * as ShowPlan from './showplan';\nimport QueryHelper from './query-helper';\nimport Convert from './convert';\n\nclass MissingIndexParser {\n    public ParseMissingIndexes(element: Element): ShowPlan.MissingIndexes {\n        const missingIndexGroupElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'MissingIndexGroup');\n        const missingIndexGroups = missingIndexGroupElements.map(i => this.ParseMissingIndexGroup(i));\n\n        return new ShowPlan.MissingIndexes(missingIndexGroups);\n    }\n\n    private ParseMissingIndexGroup(element: Element): ShowPlan.MissingIndexGroup {\n        const impact = Convert.GetFloat(element, 'Impact');\n        const missingIndexElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'MissingIndex');\n        const missingIndexes = missingIndexElements.map(i => this.ParseMissingIndex(i));\n\n        return new ShowPlan.MissingIndexGroup(impact, missingIndexes);\n    }\n\n    private ParseMissingIndex(element: Element): ShowPlan.MissingIndex {\n        const database = Convert.GetString(element, 'Database');\n        const schema = Convert.GetString(element, 'Schema');\n        const table = Convert.GetString(element, 'Table');\n\n        const columnGroupElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ColumnGroup');\n        const columnGroups = columnGroupElements.map(i => this.ParseColumnGroup(i));\n\n        return new ShowPlan.MissingIndex(database, schema, table, columnGroups);\n    }\n\n    private ParseColumnGroup(element: Element): ShowPlan.ColumnGroup {\n        const usage = Convert.GetString(element, 'Usage') as ShowPlan.ColumnGroupTypeUsage;\n        const columnElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Column');\n        const columns = columnElements.map(i => this.ParseColumn(i));\n\n        return new ShowPlan.ColumnGroup(usage, columns);\n    }\n\n    private ParseColumn(element: Element): ShowPlan.Column {\n        const name = Convert.GetString(element, 'Name');\n        const columnId = Convert.GetInt(element, 'ColumnId');\n\n        return new ShowPlan.Column(columnId, name);\n    }\n}\n\nexport default MissingIndexParser;\n","import QueryHelper from './query-helper';\nimport * as ShowPlan from './showplan';\nimport Convert from './convert';\n\nclass MetaInfoParser {\n    public ParseThreadStat(element: Element): ShowPlan.ThreadStat {\n        const parseThreadReservation = (threadElement: Element): ShowPlan.ThreadReservation => {\n            const nodeId = Convert.GetInt(threadElement, 'NodeId');\n            const reservationThreads = Convert.GetInt(threadElement, 'ReservedThreads');\n\n            return new ShowPlan.ThreadReservation(nodeId, reservationThreads);\n        };\n\n        const branches = Convert.GetInt(element, 'Branches');\n        const threadStat = new ShowPlan.ThreadStat(branches);\n\n        threadStat.UsedThreads = Convert.GetIntOrUndefined(element, 'UsedThreads');\n\n        const threadReservationElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ThreadReservation');\n        if (threadReservationElements.length > 0) {\n            threadStat.ThreadReservation = threadReservationElements.map(i => parseThreadReservation(i));\n        }\n\n        return threadStat;\n    }\n\n    public ParseMemoryGrantInfo(element: Element): ShowPlan.MemoryGrant {\n        const serialRequiredMemory = Convert.GetInt(element, 'SerialRequiredMemory');\n        const serialDesiredMemory = Convert.GetInt(element, 'SerialDesiredMemory');\n\n        const memoryGrant = new ShowPlan.MemoryGrant(serialDesiredMemory, serialRequiredMemory);\n        memoryGrant.RequiredMemory = Convert.GetIntOrUndefined(element, 'RequiredMemory');\n        memoryGrant.DesiredMemory = Convert.GetIntOrUndefined(element, 'DesiredMemory');\n        memoryGrant.RequiredMemory = Convert.GetIntOrUndefined(element, 'RequiredMemory');\n        memoryGrant.RequestedMemory = Convert.GetIntOrUndefined(element, 'RequestedMemory');\n        memoryGrant.GrantWaitTime = Convert.GetIntOrUndefined(element, 'GrantWaitTime');\n        memoryGrant.GrantedMemory = Convert.GetIntOrUndefined(element, 'GrantedMemory');\n        memoryGrant.MaxUsedMemory = Convert.GetIntOrUndefined(element, 'MaxUsedMemory');\n        memoryGrant.MaxQueryMemory = Convert.GetIntOrUndefined(element, 'MaxQueryMemory');\n\n        return memoryGrant;\n    }\n\n    public ParseOptimizerHardwareDependentProperties(element: Element): ShowPlan.OptimizerHardwareDependentProperties {\n        const estimatedAvailableMemoryGrant = Convert.GetInt(element, 'EstimatedAvailableMemoryGrant');\n        const estimatedPagesCached = Convert.GetInt(element, 'EstimatedPagesCached');\n        const props = new ShowPlan.OptimizerHardwareDependentProperties(estimatedAvailableMemoryGrant, estimatedPagesCached);\n        props.EstimatedAvailableDegreeOfParallelism = Convert.GetIntOrUndefined(element, 'EstimatedAvailableDegreeOfParallelism');\n        props.MaxCompileMemory = Convert.GetIntOrUndefined(element, 'MaxCompileMemory');\n\n        return props;\n    }\n\n    public ParseOptimizerStatsUsage(element: Element): ShowPlan.OptimizerStatsUsage {\n        const parseStatisticsInfo = (statElement: Element): ShowPlan.StatsInfo => {\n            const statistics = Convert.GetString(statElement, 'Statistics');\n            const modificationCount = Convert.GetInt(statElement, 'ModificationCount');\n            const samplingPercent = Convert.GetFloat(statElement, 'SamplingPercent');\n\n            const stats = new ShowPlan.StatsInfo(modificationCount, samplingPercent, statistics);\n            stats.LastUpdate = Convert.GetDateOrUndefined(statElement, 'LastUpdate');\n            stats.Database = Convert.GetStringOrUndefined(statElement, 'Database');\n            stats.Schema = Convert.GetStringOrUndefined(statElement, 'Schema');\n            stats.Database = Convert.GetStringOrUndefined(statElement, 'Table');\n            return stats;\n        };\n\n        const statInfoElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'StatisticsInfo');\n        const statInfo = statInfoElements.map(i => parseStatisticsInfo(i));\n\n        return new ShowPlan.OptimizerStatsUsage(statInfo);\n    }\n\n    public ParseWaitStats(element: Element): ShowPlan.WaitStatList {\n        const parseWaitStat = (waitElement: Element): ShowPlan.WaitStat => {\n            const waitType = Convert.GetString(waitElement, 'WaitType');\n            const waitTimeMs = Convert.GetInt(waitElement, 'WaitTimeMs');\n            const waitCount = Convert.GetInt(waitElement, 'WaitCount');\n\n            return new ShowPlan.WaitStat(waitCount, waitTimeMs, waitType);\n        };\n\n        const waitElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Wait');\n\n        const list = new ShowPlan.WaitStatList();\n        list.Wait = waitElements.map(i => parseWaitStat(i));\n        return list;\n    }\n\n    public ParseQueryTimeStats(element: Element): ShowPlan.QueryExecTime {\n        const cpuTime = Convert.GetInt(element, 'CpuTime');\n        const elapsedTime = Convert.GetInt(element, 'ElapsedTime');\n\n        return new ShowPlan.QueryExecTime(cpuTime, elapsedTime);\n    }\n\n    public ParseRunTimeInformation(element: Element): ShowPlan.RunTimeInformation {\n        const parsePerThread = (threadElement: Element): ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread => {\n            const threadId = Convert.GetInt(threadElement, 'Thread');\n            const actualRows = Convert.GetInt(threadElement, 'ActualRows');\n            const actualEndOfScans = Convert.GetInt(threadElement, 'ActualEndOfScans');\n            const actualExecutions = Convert.GetInt(threadElement, 'ActualExecutions');\n\n            const perThread = new ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread(actualEndOfScans, actualRows, threadId, actualExecutions);\n\n            perThread.ActualCPUms = Convert.GetIntOrUndefined(threadElement, 'ActualCPUms');\n            perThread.ActualElapsedms = Convert.GetIntOrUndefined(threadElement, 'ActualElapsedms');\n            perThread.ActualLobLogicalReads = Convert.GetIntOrUndefined(threadElement, 'ActualLobLogicalReads');\n            perThread.ActualLobPhysicalReads = Convert.GetIntOrUndefined(threadElement, 'ActualLobPhysicalReads');\n            perThread.ActualLobReadAheads = Convert.GetIntOrUndefined(threadElement, 'ActualLobReadAheads');\n            perThread.ActualLocallyAggregatedRows = Convert.GetIntOrUndefined(threadElement, 'ActualLocallyAggregatedRows');\n            perThread.ActualLogicalReads = Convert.GetIntOrUndefined(threadElement, 'ActualLogicalReads');\n            perThread.ActualLogicalReads = Convert.GetIntOrUndefined(threadElement, 'ActualLogicalReads');\n            perThread.ActualPhysicalReads = Convert.GetIntOrUndefined(threadElement, 'ActualPhysicalReads');\n\n            perThread.ActualReadAheads = Convert.GetIntOrUndefined(threadElement, 'ActualReadAheads');\n            perThread.ActualRebinds = Convert.GetIntOrUndefined(threadElement, 'ActualRebinds');\n            perThread.ActualRewinds = Convert.GetIntOrUndefined(threadElement, 'ActualRewinds');\n            perThread.ActualRowsRead = Convert.GetIntOrUndefined(threadElement, 'ActualRowsRead');\n            perThread.ActualScans = Convert.GetIntOrUndefined(threadElement, 'ActualScans');\n            perThread.ActualJoinType = Convert.GetStringOrUndefined(threadElement, 'ActualJoinType') as ShowPlan.PhysicalOp;\n\n            return perThread;\n        };\n\n        let runTimeCountersPerThread = QueryHelper.ParseAllItems(element, 'RunTimeCountersPerThread', i => parsePerThread(i));\n        if (runTimeCountersPerThread === undefined) {\n            runTimeCountersPerThread = [];\n        } else if (runTimeCountersPerThread.length > 1) {\n            // if there are more than one thread then thread 0 is just a bunch of dummy data\n            runTimeCountersPerThread = runTimeCountersPerThread.filter(i => i.Thread !== 0);\n        }\n\n        return new ShowPlan.RunTimeInformation(runTimeCountersPerThread);\n    }\n}\n\nexport default MetaInfoParser;\n","import * as ShowPlan from './showplan';\nimport QueryHelper from './query-helper';\nimport ColumnReferenceParser from './column-reference-parser';\nimport Convert from './convert';\n\nclass WarningsParser {\n    private static ColumnReferenceParser = new ColumnReferenceParser();\n\n    public ParseWarnings(element: Element): ShowPlan.Warnings {\n        const warnings = new ShowPlan.Warnings();\n\n        warnings.ColumnsWithNoStatistics = WarningsParser.ColumnReferenceParser.GetAllFromElement(element, 'ColumnsWithNoStatistics');\n\n        warnings.SpillToTempDb = QueryHelper.ParseAllItems(element, 'SpillToTempDb', i => this.ParseSpillToTempDb(i));\n        warnings.Wait = QueryHelper.ParseAllItems(element, 'Wait', i => this.ParseWait(i));\n        warnings.PlanAffectingConvert = QueryHelper.ParseAllItems(element, 'PlanAffectingConvert', i => this.ParsePlanAffectingConvert(i));\n        warnings.SortSpillDetails = QueryHelper.ParseAllItems(element, 'SortSpillDetails', i => this.ParseSortSpillDetails(i));\n        warnings.HashSpillDetails = QueryHelper.ParseAllItems(element, 'HashSpillDetails', i => this.ParseHashSpillDetails(i));\n        warnings.MemoryGrantWarning = QueryHelper.ParseAllItems(element, 'MemoryGrantWarning', i => this.ParseMemoryGrantWarning(i));\n\n        warnings.NoJoinPredicate = Convert.GetBooleanOrUndefined(element, 'NoJoinPredicate');\n        warnings.SpatialGuess = Convert.GetBooleanOrUndefined(element, 'SpatialGuess');\n        warnings.UnmatchedIndexes = Convert.GetBooleanOrUndefined(element, 'UnmatchedIndexes');\n        warnings.FullUpdateForOnlineIndexBuild = Convert.GetBooleanOrUndefined(element, 'FullUpdateForOnlineIndexBuild');\n\n        return warnings;\n    }\n\n    private ParseSpillToTempDb(element: Element): ShowPlan.SpillToTempDb {\n        const spill = new ShowPlan.SpillToTempDb();\n        spill.SpillLevel = Convert.GetIntOrUndefined(element, 'SpillLevel');\n        spill.SpilledThreadCount = Convert.GetIntOrUndefined(element, 'SpilledThreadCount');\n\n        return spill;\n    }\n\n    private ParseWait(element: Element): ShowPlan.WaitWarning {\n        const type = Convert.GetString(element, 'WaitType') as ShowPlan.WaitWarningTypeWaitType;\n        return new ShowPlan.WaitWarning(type);\n    }\n\n    private ParsePlanAffectingConvert(element: Element): ShowPlan.AffectingConvertWarning {\n        const convertIssue = Convert.GetString(element, 'ConvertIssue') as ShowPlan.AffectingConvertWarningTypeConvertIssue;\n        const expression = Convert.GetString(element, 'Expression');\n\n        return new ShowPlan.AffectingConvertWarning(convertIssue, expression);\n    }\n\n    private ParseSortSpillDetails(element: Element): ShowPlan.SortSpillDetails {\n        const details = new ShowPlan.SortSpillDetails();\n        details.GrantedMemoryKb = Convert.GetIntOrUndefined(element, 'GrantedMemoryKb');\n        details.ReadsFromTempDb = Convert.GetIntOrUndefined(element, 'ReadsFromTempDb');\n        details.UsedMemoryKb = Convert.GetIntOrUndefined(element, 'UsedMemoryKb');\n        details.WritesToTempDb = Convert.GetIntOrUndefined(element, 'WritesToTempDb');\n\n        return details;\n    }\n\n    private ParseHashSpillDetails(element: Element): ShowPlan.HashSpillDetails {\n        const details = new ShowPlan.HashSpillDetails();\n        details.GrantedMemoryKb = Convert.GetIntOrUndefined(element, 'GrantedMemoryKb');\n        details.ReadsFromTempDb = Convert.GetIntOrUndefined(element, 'ReadsFromTempDb');\n        details.UsedMemoryKb = Convert.GetIntOrUndefined(element, 'UsedMemoryKb');\n        details.WritesToTempDb = Convert.GetIntOrUndefined(element, 'WritesToTempDb');\n\n        return details;\n    }\n\n    private ParseMemoryGrantWarning(element: Element): ShowPlan.MemoryGrantWarningInfo {\n        const kind = Convert.GetString(element, 'GrantWarningKind') as ShowPlan.MemoryGrantWarningType;\n        const requestedMemory = Convert.GetInt(element, 'RequestedMemory');\n        const grantedMemory = Convert.GetInt(element, 'GrantedMemory');\n        const maxUsedMemory = Convert.GetInt(element, 'MaxUsedMemory');\n\n        return new ShowPlan.MemoryGrantWarningInfo(grantedMemory, kind, maxUsedMemory, requestedMemory);\n    }\n}\n\nexport default WarningsParser;\n","class TagAndParser<T> {\r\n    public TagName: string;\r\n\r\n    public Action: (element: Element) => T;\r\n\r\n    public constructor(TagName: string, Action: (element: Element) => T) {\r\n        this.TagName = TagName;\r\n        this.Action = Action;\r\n    }\r\n}\r\n\r\nexport default TagAndParser;\r\n","import * as ShowPlan from './showplan';\nimport Convert from './convert';\n\nclass ObjectParser {\n    public Parse(element: Element): ShowPlan.ObjectType {\n        const object = new ShowPlan.ObjectType();\n        object.Server = Convert.GetStringOrUndefined(element, 'Server');\n        object.Database = Convert.GetStringOrUndefined(element, 'Database');\n        object.Schema = Convert.GetStringOrUndefined(element, 'Schema');\n        object.Table = Convert.GetStringOrUndefined(element, 'Table');\n        object.Index = Convert.GetStringOrUndefined(element, 'Index');\n        object.Filtered = Convert.GetBooleanOrUndefined(element, 'Filtered');\n        object.Alias = Convert.GetStringOrUndefined(element, 'Alias');\n        object.TableReferenceId = Convert.GetIntOrUndefined(element, 'TableReferenceId');\n\n        object.IndexKind = Convert.GetStringOrUndefined(element, 'IndexKind') as ShowPlan.IndexKindType;\n        object.CloneAccessScope = Convert.GetStringOrUndefined(element, 'CloneAccessScope') as ShowPlan.CloneAccessScope;\n        object.Storage = Convert.GetStringOrUndefined(element, 'Storage') as ShowPlan.StorageType;\n\n        return object;\n    }\n}\n\nexport default ObjectParser;\n","import * as ShowPlan from './showplan';\nimport Convert from './convert';\nimport TagAndParser from './tag-and-parser';\nimport QueryHelper from './query-helper';\nimport ColumnReferenceParser from './column-reference-parser';\nimport ObjectParser from './object-parser';\n\n/* eslint-disable class-methods-use-this */\n\nclass ScalarExpressionParser {\n    private relOpParser: (parentRelOp: ShowPlan.RelOp | undefined, relOpElement: Element) => ShowPlan.RelOp;\n\n    private static ColumnReferenceParser = new ColumnReferenceParser();\n\n    private static ObjectParser = new ObjectParser();\n\n    public Parse(scalarExpressionElement: Element): ShowPlan.ScalarExpression {\n        const scalarOperation = QueryHelper.GetImmediateChildNodesByTagName(scalarExpressionElement, 'ScalarOperator')[0];\n        const operation = this.ParseScalarType(scalarOperation);\n\n        return new ShowPlan.ScalarExpression(operation);\n    }\n\n    public ParseScalarType(scalarElement: Element): ShowPlan.Scalar {\n        const parsers: TagAndParser<ShowPlan.ScalarOp>[] = [\n            new TagAndParser('Aggregate', e => this.ParseAggregate(e)),\n            new TagAndParser('Arithmetic', e => this.ParseArithmetic(e)),\n            new TagAndParser('Assign', e => this.ParseAssign(e)),\n            new TagAndParser('Compare', e => this.ParseCompare(e)),\n            new TagAndParser('Const', e => this.ParseConst(e)),\n            new TagAndParser('Convert', e => this.ParseConvert(e)),\n            new TagAndParser('Identifier', e => this.ParseIdentifier(e)),\n            new TagAndParser('IF', e => this.ParseConditional(e)),\n            new TagAndParser('Intrinsic', e => this.ParseIntrinsic(e)),\n            new TagAndParser('Logical', e => this.ParseLogical(e)),\n            new TagAndParser('MultipleAssign', e => this.ParseMultiAssign(e)),\n            new TagAndParser('ScalarExpressionList', e => this.ParseScalarExpressionList(e)),\n            new TagAndParser('Sequence', e => this.ParseSequence(e)),\n            new TagAndParser('Subquery', e => this.ParseSubquery(e)),\n            new TagAndParser('UDTMethod', e => this.ParseUDTMethod(e)),\n            new TagAndParser('UserDefinedAggregate', e => this.ParseUserDefinedAggregate(e)),\n            new TagAndParser('UserDefinedFunction', e => this.ParseUDF(e)),\n        ];\n\n        const element = QueryHelper.GetAllImmediateChildNodes(scalarElement).filter(i => i.tagName !== 'InternalInfo')[0];\n        const parser = parsers.filter(i => i.TagName === element.tagName);\n        let operationOp: ShowPlan.ScalarOp;\n        if (parser.length === 1) {\n            operationOp = parser[0].Action(element);\n        } else {\n            operationOp = ShowPlan.NotImplementedScalarOp;\n        }\n\n        const scalar = new ShowPlan.Scalar(operationOp);\n        scalar.ScalarString = Convert.GetStringOrUndefined(scalarElement, 'ScalarString');\n\n        return scalar;\n    }\n\n    private ParseAggregate(element: Element): ShowPlan.Aggregate {\n        const aggType = Convert.GetString(element, 'AggType');\n        const distinct = Convert.GetBoolean(element, 'Distinct');\n        const aggregate = new ShowPlan.Aggregate(aggType, distinct);\n\n        const operators = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (operators.length > 0) {\n            aggregate.ScalarOperator = operators.map(value => this.ParseScalarType(value));\n        }\n\n        return aggregate;\n    }\n\n    private ParseArithmetic(element: Element): ShowPlan.Arithmetic {\n        const operation = element.getAttribute('Operation') as ShowPlan.ArithmeticOperation;\n        const scalarOperators = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator')\n            .map(value => this.ParseScalarType(value));\n        return new ShowPlan.Arithmetic(operation, scalarOperators);\n    }\n\n    private ParseAssign(element: Element): ShowPlan.Assign {\n        const columnReferenceElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ColumnReference')[0];\n        const scalarOperator = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator')[0];\n\n        return new ShowPlan.Assign(ScalarExpressionParser.ColumnReferenceParser.Parse(columnReferenceElement), this.ParseScalarType(scalarOperator));\n    }\n\n    private ParseCompare(element: Element): ShowPlan.CompareType {\n        const compareOp = element.getAttribute('CompareOp') as ShowPlan.CompareOp;\n        const scalarOps = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n\n        return new ShowPlan.CompareType(compareOp, scalarOps.map(e => this.ParseScalarType(e)));\n    }\n\n    private ParseConst(element: Element): ShowPlan.Const {\n        const constValue = Convert.GetString(element, 'ConstValue');\n        return new ShowPlan.Const(constValue);\n    }\n\n    private ParseConvert(element: Element): ShowPlan.Convert {\n    // let style = QueryHelper.GetImmediateChildNodesByTagName(element, 'Style')[0]\n    // per the xsd this says there could be a style element here, but also a style attribute\n    // I can't figure out how to trigger the element to show at all show let's just use the attribute\n    // until I can find a working case to keep it.\n        const scalarOperator = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        const dataType = Convert.GetString(element, 'DataType');\n        const length = Convert.GetIntOrUndefined(element, 'Length');\n        const precision = Convert.GetIntOrUndefined(element, 'Precision');\n        const scale = Convert.GetIntOrUndefined(element, 'Scale');\n        const style = Convert.GetInt(element, 'Style');\n        const implicit = Convert.GetBoolean(element, 'Implicit');\n\n        const convert = new ShowPlan.Convert(dataType, implicit, style, this.ParseScalarType(scalarOperator[0]));\n        convert.Length = length;\n        convert.Precision = precision;\n        convert.Scale = scale;\n\n        return convert;\n    }\n\n    private ParseIdentifier(element: Element): ShowPlan.Ident {\n        const ident = new ShowPlan.Ident();\n        ident.Table = Convert.GetStringOrUndefined(element, 'Table');\n        const columnReferenceElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ColumnReference');\n        if (columnReferenceElement.length === 1) {\n            ident.ColumnReference = ScalarExpressionParser.ColumnReferenceParser.Parse(columnReferenceElement[0]);\n        }\n\n        return ident;\n    }\n\n    private ParseConditional(element: Element): ShowPlan.Conditional {\n        const condition = this.Parse(QueryHelper.GetImmediateChildNodesByTagName(element, 'Condition')[0]);\n        const then = this.Parse(QueryHelper.GetImmediateChildNodesByTagName(element, 'Then')[0]);\n        const $else = this.Parse(QueryHelper.GetImmediateChildNodesByTagName(element, 'Else')[0]);\n\n        return new ShowPlan.Conditional(condition, then, $else);\n    }\n\n    private ParseIntrinsic(element: Element): ShowPlan.Intrinsic {\n        const functionName = Convert.GetString(element, 'FunctionName');\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        const intrinsic = new ShowPlan.Intrinsic(functionName);\n\n        if (scalarOperatorElements.length > 0) {\n            intrinsic.ScalarOperator = scalarOperatorElements.map(e => this.ParseScalarType(e));\n        }\n\n        return intrinsic;\n    }\n\n    private ParseLogical(element: Element): ShowPlan.Logical {\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        const operation = Convert.GetString(element, 'Operation') as ShowPlan.LogicalOperationType;\n\n        return new ShowPlan.Logical(operation, scalarOperatorElements.map(i => this.ParseScalarType(i)));\n    }\n\n    private ParseMultiAssign(element: Element): ShowPlan.MultiAssign {\n        const assignElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Assign');\n        const assigns = assignElements.map(i => this.ParseAssign(i));\n\n        return new ShowPlan.MultiAssign(assigns);\n    }\n\n    private ParseScalarExpressionList(element: Element): ShowPlan.ScalarExpressionList {\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        return new ShowPlan.ScalarExpressionList(scalarOperatorElements.map(i => this.ParseScalarType(i)));\n    }\n\n    private ParseSequence(element: Element): ShowPlan.ScalarSequence {\n        const functionName = Convert.GetString(element, 'FunctionName');\n\n        return new ShowPlan.ScalarSequence(functionName);\n    }\n\n    private ParseSubquery(element: Element): ShowPlan.Subquery {\n        const relOp = this.relOpParser(undefined, QueryHelper.GetImmediateChildNodesByTagName(element, 'RelOp')[0]);\n        const operation = Convert.GetString(element, 'Operation') as ShowPlan.SubqueryOperationType;\n        const subquery = new ShowPlan.Subquery(operation, relOp);\n\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (scalarOperatorElements.length === 1) {\n            subquery.ScalarOperator = this.ParseScalarType(scalarOperatorElements[0]);\n        }\n\n        return subquery;\n    }\n\n    private ParseUDTMethod(element: Element): ShowPlan.UDTMethod {\n        const udtMethod = new ShowPlan.UDTMethod();\n        const clrFunctionElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'CLRFunction');\n        if (clrFunctionElements.length === 1) {\n            udtMethod.CLRFunction = this.ParseCLRFunction(clrFunctionElements[0]);\n        }\n\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (scalarOperatorElements.length > 0) {\n            udtMethod.ScalarOperator = scalarOperatorElements.map(e => this.ParseScalarType(e));\n        }\n\n        return udtMethod;\n    }\n\n    private ParseUserDefinedAggregate(element: Element): ShowPlan.UDAggregate {\n        const distinct = Convert.GetBoolean(element, 'Distinct');\n        const aggregate = new ShowPlan.UDAggregate(distinct);\n        const aggObjectElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'UDAggObject');\n        if (aggObjectElement.length === 1) {\n            aggregate.UDAggObject = ScalarExpressionParser.ObjectParser.Parse(aggObjectElement[0]);\n        }\n\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (scalarOperatorElements.length > 0) {\n            aggregate.ScalarOperator = scalarOperatorElements.map(e => this.ParseScalarType(e));\n        }\n\n        return aggregate;\n    }\n\n    private ParseUDF(element: Element): ShowPlan.UDF {\n        const functionName = Convert.GetString(element, 'FunctionName');\n\n        const udf = new ShowPlan.UDF(functionName);\n        udf.IsClrFunction = Convert.GetBooleanOrUndefined(element, 'IsClrFunction');\n\n        const clrFunctionElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'CLRFunction');\n        if (clrFunctionElements.length === 1) {\n            udf.CLRFunction = this.ParseCLRFunction(clrFunctionElements[0]);\n        }\n\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (scalarOperatorElements.length > 0) {\n            udf.ScalarOperator = scalarOperatorElements.map(e => this.ParseScalarType(e));\n        }\n\n        return udf;\n    }\n\n    private ParseCLRFunction(element: Element): ShowPlan.CLRFunction {\n        const assembly = Convert.GetStringOrUndefined(element, 'Assembly');\n        const $class = Convert.GetString(element, 'Class');\n        const method = Convert.GetStringOrUndefined(element, 'Method');\n\n        const clrFunction = new ShowPlan.CLRFunction($class);\n        clrFunction.Assembly = assembly;\n        clrFunction.Method = method;\n\n        return clrFunction;\n    }\n\n    public constructor(relOpParser: (parentRelOp: ShowPlan.RelOp | undefined, relOpElement: Element) => ShowPlan.RelOp) {\n        this.relOpParser = relOpParser;\n    }\n}\n\nexport default ScalarExpressionParser;\n","import * as ShowPlan from './showplan';\nimport QueryHelper from './query-helper';\nimport Convert from './convert';\nimport ColumnReferenceParser from './column-reference-parser';\n\nclass SeekPredicateParser {\n    private scalarExpresionParser: (scalarExpressionElement: Element) => ShowPlan.ScalarExpression;\n\n    private static ColumnReferenceParser = new ColumnReferenceParser();\n\n    public constructor(scalarExpressionParser: (scalarExpressionElement: Element) => ShowPlan.ScalarExpression) {\n        this.scalarExpresionParser = scalarExpressionParser;\n    }\n\n    public ParseSeekPredicates(element: Element): ShowPlan.SeekPredicates {\n        const seekPredicates = new ShowPlan.SeekPredicates();\n\n        const seekPredicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicate');\n        if (seekPredicateElements.length > 0) {\n            seekPredicates.SeekPredicate = seekPredicateElements.map(i => this.ParseSeekPredicate(i));\n        }\n\n        const seekPredicateNewElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicateNew');\n        if (seekPredicateNewElements.length > 0) {\n            seekPredicates.SeekPredicateNew = seekPredicateNewElements.map(i => this.ParseSeekPredicateNew(i));\n        }\n\n        return seekPredicates;\n    }\n\n    public ParseSeekPredicate(element: Element): ShowPlan.SeekPredicate {\n        const seekPredicate = new ShowPlan.SeekPredicate();\n\n        const prefixElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'Prefix');\n        if (prefixElement.length === 1) {\n            seekPredicate.Prefix = this.ParseScanRangeType(prefixElement[0]);\n        }\n\n        const startRangeElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'StartRange');\n        if (startRangeElement.length === 1) {\n            seekPredicate.StartRange = this.ParseScanRangeType(startRangeElement[0]);\n        }\n\n        const endRangeElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'EndRange');\n        if (endRangeElement.length === 1) {\n            seekPredicate.EndRange = this.ParseScanRangeType(endRangeElement[0]);\n        }\n\n        return seekPredicate;\n    }\n\n    public ParseSeekPredicateNew(element: Element): ShowPlan.SeekPredicateNew {\n        const seekKeyElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekKeys');\n        const seekKeys = seekKeyElements.map(i => this.ParseSeekPredicate(i));\n\n        return new ShowPlan.SeekPredicateNew(seekKeys);\n    }\n\n    private ParseSeekPredicatePart(element: Element): ShowPlan.SeekPredicatePart {\n        const seekPredicateNewElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicateNew');\n        const seekPredicateNew = seekPredicateNewElements.map(i => this.ParseSeekPredicateNew(i));\n\n        return new ShowPlan.SeekPredicatePart(seekPredicateNew);\n    }\n\n    private ParseScanRangeType(element: Element): ShowPlan.ScanRange {\n        const scanType = Convert.GetString(element, 'ScanType') as ShowPlan.CompareOp;\n        const rangeExpressionElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'RangeExpressions');\n\n        const rangeColumns = SeekPredicateParser.ColumnReferenceParser.GetAllFromElement(element, 'RangeColumns');\n        const rangeExpressions = rangeExpressionElements.map(i => this.scalarExpresionParser(i));\n\n        return new ShowPlan.ScanRange(scanType, rangeColumns, rangeExpressions);\n    }\n}\n\nexport default SeekPredicateParser;\n","import * as ShowPlan from './showplan';\nimport QueryHelper from './query-helper';\nimport Convert from './convert';\nimport TagAndParser from './tag-and-parser';\nimport ScalarExpressionParser from './scalar-expression-parser';\nimport ObjectParser from './object-parser';\nimport SeekPredicateParser from './seek-predicate-parser';\nimport WarningsParser from './warnings-parser';\nimport ColumnReferenceParser from './column-reference-parser';\nimport MetaInfoParser from './meta-info-parser';\n\nclass RelOpParser {\n    private static ScalarExpressionParser = new ScalarExpressionParser((parentRelOp: ShowPlan.RelOp | undefined, relOpElement: Element) => RelOpParser.ParseRelOp(parentRelOp, relOpElement));\n\n    private static SeekPredicateParser = new SeekPredicateParser(element => RelOpParser.ScalarExpressionParser.Parse(element));\n\n    private static MetaInfoParser = new MetaInfoParser();\n\n    private static ObjectParser = new ObjectParser();\n\n    private static WarningsParser = new WarningsParser();\n\n    private static ColumnReferenceParser = new ColumnReferenceParser();\n\n    public static ParseRelOp(parentRelOp: ShowPlan.RelOp | undefined, relOpElement: Element): ShowPlan.RelOp {\n        const tagsAndParsers: TagAndParser<ShowPlan.RelOpAction>[] = [\n            new TagAndParser('AdaptiveJoin', element => this.ParseAdaptiveJoin(element)),\n            new TagAndParser('Assert', element => this.ParseFilterElement(element)),\n            new TagAndParser('BatchHashTableBuild', element => this.ParseBatchHashTableBuild(element)),\n            new TagAndParser('Bitmap', element => this.ParseBitmap(element)),\n            new TagAndParser('Collapse', element => this.ParseCollapse(element)),\n            new TagAndParser('ComputeScalar', element => this.ParseComputeScalar(element)),\n            new TagAndParser('ConstantScan', element => this.ParseConstantScan(element)),\n            new TagAndParser('Concat', element => this.ParseConcat(element)),\n            new TagAndParser('CreateIndex', element => this.ParseCreateIndex(element)),\n            new TagAndParser('DeletedScan', element => this.ParseRowSet(element)),\n            new TagAndParser('Extension', element => this.ParseUDX(element)),\n            new TagAndParser('Filter', element => this.ParseFilterElement(element)),\n            new TagAndParser('ForeignKeyReferencesCheck', element => this.ParseForeignKeyReferencesCheckType(element)),\n            new TagAndParser('Generic', element => this.ParseGeneric(element)),\n            new TagAndParser('Hash', element => this.ParseHash(element)),\n            new TagAndParser('InsertedScan', element => this.ParseRowSet(element)),\n            new TagAndParser('LogRowScan', element => this.ParseRelOpBaseType(element)),\n            new TagAndParser('Merge', element => this.ParseMerge(element)),\n            new TagAndParser('MergeInterval', element => this.ParseSimpleIteratorOneChild(element)),\n            new TagAndParser('NestedLoops', element => this.ParseNestedLoop(element)),\n            new TagAndParser('OnlineIndex', element => this.ParseCreateIndex(element)),\n            new TagAndParser('Parallelism', element => this.ParseParallelism(element)),\n            new TagAndParser('ParameterTableScan', element => this.ParseRelOpBaseType(element)),\n            new TagAndParser('PrintDataflow', element => this.ParseRelOpBaseType(element)), // i can't find this ANYWHERE online\n            new TagAndParser('Put', element => this.ParsePut(element)),\n            new TagAndParser('RemoteFetch', element => this.ParseRemoteFetch(element)),\n            new TagAndParser('RemoteModify', element => this.ParseRemoteModify(element)),\n            new TagAndParser('RemoteQuery', element => this.ParseRemoteQuery(element)),\n            new TagAndParser('RemoteRange', element => this.ParseRemoteRange(element)),\n            new TagAndParser('RemoteScan', element => this.ParseRemote(element)),\n            new TagAndParser('RowCountSpool', element => this.ParseSpool(element)),\n            new TagAndParser('ScalarInsert', element => this.ParseScalarInsert(element)),\n            new TagAndParser('Segment', element => this.ParseSegment(element)),\n            new TagAndParser('Sequence', element => this.ParseSequence(element)),\n            new TagAndParser('SequenceProject', element => this.ParseComputeScalar(element)),\n            new TagAndParser('SimpleUpdate', element => this.ParseSimpleUpdate(element)),\n            new TagAndParser('Sort', element => this.ParseSort(element)),\n            new TagAndParser('Split', element => this.ParseSplit(element)),\n            new TagAndParser('Spool', element => this.ParseSpool(element)),\n            new TagAndParser('StreamAggregate', element => this.ParseStreamAggregate(element)),\n            new TagAndParser('Switch', element => this.ParseSwitch(element)),\n            new TagAndParser('TableScan', element => this.ParseTableScan(element)),\n            new TagAndParser('TableValuedFunction', element => this.ParseTableValuedFunction(element)),\n            new TagAndParser('Top', element => this.ParseTopElement(element)),\n            new TagAndParser('TopSort', element => this.ParseTopSort(element)),\n            new TagAndParser('Update', element => this.ParseUpdate(element)),\n            new TagAndParser('IndexScan', element => this.ParseIndexScan(element)),\n            new TagAndParser('WindowSpool', element => this.ParseWindow(element)),\n            new TagAndParser('WindowAggregate', element => this.ParseWindowAggregate(element)),\n        ];\n\n        /*\n<xsd:element name=\"Generic\" type=\"shp:GenericType\"/>\n<xsd:element name=\"Put\" type=\"shp:PutType\"/>\n\n*/\n\n        let action: ShowPlan.RelOpAction | undefined;\n        let actionElement: Element | undefined;\n\n        // eslint-disable-next-line\n        for (const tagAndParser of tagsAndParsers) {\n            const childNodes = QueryHelper.GetImmediateChildNodesByTagName(\n                relOpElement,\n                tagAndParser.TagName,\n            );\n            if (childNodes.length === 1) {\n                [actionElement] = childNodes;\n                action = tagAndParser.Action(actionElement);\n                break;\n            }\n        }\n\n        if (action !== undefined && actionElement !== undefined) {\n            const definedValuesElement = QueryHelper.GetImmediateChildNodesByTagName(actionElement, 'DefinedValues');\n            if (definedValuesElement.length === 1) {\n                const definedValueElements = QueryHelper.GetImmediateChildNodesByTagName(definedValuesElement[0], 'DefinedValue');\n                action.DefinedValues = definedValueElements.map(i => this.ParseDefinedValue(i));\n            }\n        } else {\n            action = new ShowPlan.Generic();\n        }\n\n        const avgRowSize = Convert.GetInt(relOpElement, 'AvgRowSize');\n        const EstimateCPU = Convert.GetFloat(relOpElement, 'EstimateCPU');\n        const EstimatedTotalSubtreeCost = Convert.GetFloat(\n            relOpElement,\n            'EstimatedTotalSubtreeCost',\n        );\n        const EstimateIO = Convert.GetFloat(relOpElement, 'EstimateIO');\n        const EstimateRebinds = Convert.GetFloat(relOpElement, 'EstimateRebinds');\n        const EstimateRewinds = Convert.GetFloat(relOpElement, 'EstimateRewinds');\n        const EstimateRows = Convert.GetFloat(relOpElement, 'EstimateRows');\n        const LogicalOp = Convert.GetString(relOpElement, 'LogicalOp') as ShowPlan.LogicalOpType;\n        const NodeId = Convert.GetInt(relOpElement, 'NodeId');\n        const Parallel = Convert.GetBoolean(relOpElement, 'Parallel');\n        const PhysicalOp = Convert.GetString(relOpElement, 'PhysicalOp') as ShowPlan.PhysicalOp;\n\n        const columnReferenceList = RelOpParser.ColumnReferenceParser.GetAllFromElement(relOpElement, 'OutputList');\n\n        const thisOp = new ShowPlan.RelOp(\n            action,\n            avgRowSize,\n            EstimateCPU,\n            EstimatedTotalSubtreeCost,\n            EstimateIO,\n            EstimateRebinds,\n            EstimateRewinds,\n            EstimateRows,\n            LogicalOp,\n            NodeId,\n            Parallel,\n            PhysicalOp,\n            columnReferenceList,\n        );\n        thisOp.AdaptiveThresholdRows = Convert.GetFloatOrUndefined(relOpElement, 'AdaptiveThresholdRows');\n        thisOp.EstimatedJoinType = Convert.GetStringOrUndefined(relOpElement, 'EstimatedJoinType') as ShowPlan.PhysicalOp;\n        thisOp.Warnings = QueryHelper.ParseSingleItem(relOpElement, 'Warnings', i => RelOpParser.WarningsParser.ParseWarnings(i));\n        thisOp.RunTimeInformation = QueryHelper.ParseSingleItem(relOpElement, 'RunTimeInformation', i => RelOpParser.MetaInfoParser.ParseRunTimeInformation(i));\n        thisOp.ParentRelOp = parentRelOp;\n\n        if (action !== undefined && actionElement !== undefined) {\n            const childOpElements = QueryHelper.GetImmediateChildNodesByTagName(actionElement, 'RelOp');\n\n            if (childOpElements.length > 0) {\n                action.RelOp = childOpElements.map(element => this.ParseRelOp(thisOp, element));\n            }\n        }\n\n        return thisOp;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseGeneric(element: Element): ShowPlan.Generic {\n        return new ShowPlan.Generic();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseSequence(element: Element): ShowPlan.Sequence {\n        return new ShowPlan.Sequence();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseConcat(element: Element): ShowPlan.Concat {\n        return new ShowPlan.Concat();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseSimpleIteratorOneChild(element: Element): ShowPlan.SimpleIteratorOneChild {\n        return new ShowPlan.SimpleIteratorOneChild();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseWindow(element: Element): ShowPlan.Window {\n        return new ShowPlan.Window();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseWindowAggregate(element: Element): ShowPlan.WindowAggregate {\n        return new ShowPlan.WindowAggregate();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseRelOpBaseType(element: Element): ShowPlan.RelOpAction {\n        return new ShowPlan.RelOpAction();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private static ParseConstantScan(element: Element): ShowPlan.ConstantScan {\n        const scan = new ShowPlan.ConstantScan();\n        // todo parse values. I can't find an example of this though\n        return scan;\n    }\n\n    private static ParseRowSet(element: Element): ShowPlan.Rowset {\n        const object = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object')\n            .map(i => RelOpParser.ObjectParser.Parse(i));\n\n        return new ShowPlan.Rowset(object);\n    }\n\n    private static ParseSwitch(element: Element): ShowPlan.Switch {\n        const $switch = new ShowPlan.Switch();\n        const predicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Predicate');\n        if (predicateElements.length === 1) {\n            [$switch.Predicate] = predicateElements.map(i => RelOpParser.ScalarExpressionParser.Parse(i));\n        }\n        return $switch;\n    }\n\n    private static ParseCreateIndex(element: Element): ShowPlan.CreateIndex {\n        const objectElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object');\n        return new ShowPlan.CreateIndex(objectElement.map(i => RelOpParser.ObjectParser.Parse(i)));\n    }\n\n    private static ParseBitmap(element: Element): ShowPlan.Bitmap {\n        const hashkeys = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeys');\n        return new ShowPlan.Bitmap(hashkeys);\n    }\n\n    private static ParseForeignKeyReferencesCheckType(element: Element): ShowPlan.ForeignKeyReferencesCheck {\n        const parseForeignKeyReferenceCheckElements = (fkElement: Element): ShowPlan.ForeignKeyReferenceCheck => {\n            const indexScanElements = QueryHelper.GetImmediateChildNodesByTagName(fkElement, 'IndexScan');\n            const indexScan = this.ParseIndexScan(indexScanElements[0]);\n            return new ShowPlan.ForeignKeyReferenceCheck(indexScan);\n        };\n\n        const foreignKeyReferenceCheckElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ForeignKeyReferenceCheck');\n        const foreignKeyReferenceCheck = foreignKeyReferenceCheckElements.map(i => parseForeignKeyReferenceCheckElements(i));\n\n        const check = new ShowPlan.ForeignKeyReferencesCheck(foreignKeyReferenceCheck);\n        check.ForeignKeyReferencesCount = Convert.GetIntOrUndefined(element, 'ForeignKeyReferencesCount');\n        check.NoMatchingIndexCount = Convert.GetIntOrUndefined(element, 'NoMatchingIndexCount');\n        check.PartialMatchingIndexCount = Convert.GetIntOrUndefined(element, 'PartialMatchingIndexCount');\n\n        return check;\n    }\n\n    private static ParseNestedLoop(element: Element): ShowPlan.NestedLoops {\n        const optimized = Convert.GetBoolean(element, 'Optimized');\n        const nestedLoop = new ShowPlan.NestedLoops(optimized);\n\n        nestedLoop.Predicate = QueryHelper.ParseSingleItem(element, 'Predicate', i => RelOpParser.ScalarExpressionParser.Parse(i));\n        nestedLoop.PassThru = QueryHelper.ParseSingleItem(element, 'PassThru', i => RelOpParser.ScalarExpressionParser.Parse(i));\n        nestedLoop.WithOrderedPrefetch = Convert.GetBooleanOrUndefined(element, 'WithOrderedPrefetch');\n        nestedLoop.WithUnorderedPrefetch = Convert.GetBooleanOrUndefined(element, 'WithUnorderedPrefetch');\n\n        nestedLoop.OuterReferences = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'OuterReferences');\n\n        return nestedLoop;\n    }\n\n    private static ParseBatchHashTableBuild(element: Element): ShowPlan.BatchHashTableBuild {\n        const op = new ShowPlan.BatchHashTableBuild();\n        op.BitmapCreator = Convert.GetBooleanOrUndefined(element, 'BitmapCreator');\n        return op;\n    }\n\n    private static ParseSplit(element: Element): ShowPlan.Split {\n        const split = new ShowPlan.Split();\n        const actionColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'ActionColumn');\n        if (actionColumns.length === 1) {\n            [split.ActionColumn] = actionColumns;\n        }\n\n        return split;\n    }\n\n    private static ParseUDX(element: Element): ShowPlan.UDX {\n        const name = Convert.GetString(element, 'UDXName');\n        const udx = new ShowPlan.UDX(name);\n\n        udx.UsedUDXColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'UsedUDXColumns');\n\n        return udx;\n    }\n\n    private static ParseSegment(element: Element): ShowPlan.Segment {\n        const groupBy = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'GroupBy');\n        const segmentColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'SegmentColumn');\n        return new ShowPlan.Segment(groupBy, segmentColumns[0]);\n    }\n\n    private static ParseScalarInsert(element: Element): ShowPlan.ScalarInsert {\n        const object = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object')\n            .map(i => RelOpParser.ObjectParser.Parse(i));\n\n        const insert = new ShowPlan.ScalarInsert(object);\n\n        const setPredicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SetPredicate');\n        if (setPredicateElements.length === 1) {\n            insert.SetPredicate = this.parseSetPredicateElementType(setPredicateElements[0]);\n        }\n\n        insert.DMLRequestSort = Convert.GetBooleanOrUndefined(element, 'DMLRequestSort');\n        return insert;\n    }\n\n    private static ParseSimpleUpdate(element: Element): ShowPlan.SimpleUpdate {\n        const object = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object')\n            .map(i => RelOpParser.ObjectParser.Parse(i));\n\n        const update = new ShowPlan.SimpleUpdate(object);\n\n        const seekPredicateElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicate');\n        if (seekPredicateElement.length === 1) {\n            update.SeekPredicate = RelOpParser.SeekPredicateParser.ParseSeekPredicate(seekPredicateElement[0]);\n        }\n\n        const seekPredicateNewElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicateNew');\n        if (seekPredicateNewElement.length === 1) {\n            update.SeekPredicateNew = RelOpParser.SeekPredicateParser.ParseSeekPredicateNew(seekPredicateNewElement[0]);\n        }\n\n        const setPredicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SetPredicate');\n        if (setPredicateElements.length === 1) {\n            update.SetPredicate = this.parseSetPredicateElementType(setPredicateElements[0]);\n        }\n\n        update.DMLRequestSort = Convert.GetBooleanOrUndefined(element, 'DMLRequestSort');\n        return update;\n    }\n\n    private static ParseSpool(element: Element): ShowPlan.Spool {\n        const spool = new ShowPlan.Spool();\n        spool.Stack = Convert.GetBooleanOrUndefined(element, 'Stack');\n        spool.PrimaryNodeId = Convert.GetIntOrUndefined(element, 'PrimaryNodeId');\n\n        const seekPredicateElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicate');\n        if (seekPredicateElement.length === 1) {\n            spool.SeekPredicate = RelOpParser.SeekPredicateParser.ParseSeekPredicate(seekPredicateElement[0]);\n        }\n\n        const seekPredicateNewElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicateNew');\n        if (seekPredicateNewElement.length === 1) {\n            spool.SeekPredicateNew = RelOpParser.SeekPredicateParser.ParseSeekPredicateNew(seekPredicateNewElement[0]);\n        }\n\n        return spool;\n    }\n\n    private static ParseSort(element: Element): ShowPlan.Sort {\n        const distinct = Convert.GetBoolean(element, 'Distinct');\n        const orderByElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'OrderBy');\n        const orderByColumnElements = QueryHelper.GetImmediateChildNodesByTagName(orderByElement[0], 'OrderByColumn');\n        const orderBy = new ShowPlan.OrderBy(orderByColumnElements.map(i => this.parseOrderByColumn(i)));\n\n        return new ShowPlan.Sort(distinct, orderBy);\n    }\n\n    private static parseOrderByColumn(element: Element): ShowPlan.OrderByTypeOrderByColumn {\n        const ascending = Convert.GetBoolean(element, 'Ascending');\n        const columnReferenceElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ColumnReference');\n        const columnReference = RelOpParser.ColumnReferenceParser.Parse(columnReferenceElement[0]);\n\n        return new ShowPlan.OrderByTypeOrderByColumn(ascending, columnReference);\n    }\n\n    private static ParseTopSort(element: Element): ShowPlan.TopSort {\n        const distinct = Convert.GetBoolean(element, 'Distinct');\n        const orderByElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'OrderBy');\n        const orderByColumnElements = QueryHelper.GetImmediateChildNodesByTagName(orderByElement[0], 'OrderByColumn');\n\n        const orderBy = new ShowPlan.OrderBy(orderByColumnElements.map(i => this.parseOrderByColumn(i)));\n        const rows = Convert.GetInt(element, 'Rows');\n\n        const sort = new ShowPlan.TopSort(rows, distinct, orderBy);\n        sort.WithTies = Convert.GetBooleanOrUndefined(element, 'WithTies');\n\n        return sort;\n    }\n\n    private static ParseTableValuedFunction(element: Element): ShowPlan.TableValuedFunction {\n        const tvf = new ShowPlan.TableValuedFunction();\n\n        tvf.Object = QueryHelper.ParseSingleItem(element, 'Object', i => RelOpParser.ObjectParser.Parse(i));\n        tvf.Predicate = QueryHelper.ParseSingleItem(element, 'Predicate', i => RelOpParser.ScalarExpressionParser.Parse(i));\n\n        const parameterListElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ParameterList');\n        if (parameterListElements.length === 1) {\n            const scalarElements = QueryHelper.GetImmediateChildNodesByTagName(parameterListElements[0], 'ScalarOperator');\n            const scalars = scalarElements.map(i => RelOpParser.ScalarExpressionParser.ParseScalarType(i));\n            tvf.ParameterList = new ShowPlan.ScalarExpressionList(scalars);\n        }\n\n        return tvf;\n    }\n\n    private static ParseMerge(element: Element): ShowPlan.Merge {\n        const merge = new ShowPlan.Merge();\n        merge.InnerSideJoinColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'InnerSideJoinColumns');\n        merge.OuterSideJoinColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'OuterSideJoinColumns');\n\n        const residualElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'Residual');\n        if (residualElement.length === 1) {\n            merge.Residual = RelOpParser.ScalarExpressionParser.Parse(residualElement[0]);\n        }\n\n        const passThruElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'PassThru');\n        if (passThruElement.length === 1) {\n            merge.PassThru = RelOpParser.ScalarExpressionParser.Parse(passThruElement[0]);\n        }\n\n        const starJoinElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'StarJoinInfo');\n        if (starJoinElement.length === 1) {\n            merge.StarJoinInfo = this.ParseStarJoinInfo(starJoinElement[0]);\n        }\n\n        merge.ManyToMany = Convert.GetBooleanOrUndefined(element, 'ManyToMany');\n        return merge;\n    }\n\n    private static ParseAdaptiveJoin(element: Element): ShowPlan.AdaptiveJoin {\n        const optimized = Convert.GetBoolean(element, 'Optimized');\n        const adaptiveJoin = new ShowPlan.AdaptiveJoin(optimized);\n\n        adaptiveJoin.HashKeysBuild = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeysBuild');\n        adaptiveJoin.HashKeysProbe = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeysProbe');\n\n        const buildResidualElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'BuildResidual');\n        if (buildResidualElement.length === 1) {\n            adaptiveJoin.BuildResidual = RelOpParser.ScalarExpressionParser.Parse(buildResidualElement[0]);\n        }\n\n        const probeElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ProbeResidual');\n        if (probeElement.length === 1) {\n            adaptiveJoin.ProbeResidual = RelOpParser.ScalarExpressionParser.Parse(probeElement[0]);\n        }\n\n        const starJoinElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'StarJoinInfo');\n        if (starJoinElement.length === 1) {\n            adaptiveJoin.StarJoinInfo = this.ParseStarJoinInfo(starJoinElement[0]);\n        }\n\n        const passThruElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'BuildResidual');\n        if (passThruElement.length === 1) {\n            adaptiveJoin.PassThru = RelOpParser.ScalarExpressionParser.Parse(passThruElement[0]);\n        }\n\n        adaptiveJoin.OuterReferences = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'OuterReferences');\n        const partitionIdElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'PartitionId');\n        if (partitionIdElement.length === 1) {\n            adaptiveJoin.PartitionId = RelOpParser.ColumnReferenceParser.Parse(partitionIdElement[0]);\n        }\n\n        adaptiveJoin.BitmapCreator = Convert.GetBooleanOrUndefined(element, 'BitmapCreator');\n\n        return adaptiveJoin;\n    }\n\n    private static ParseStreamAggregate(element: Element): ShowPlan.StreamAggregate {\n        const groupBy = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'GroupBy');\n\n        const stream = new ShowPlan.StreamAggregate();\n        stream.GroupBy = groupBy;\n\n        const rollupElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'RollupInfo');\n        if (rollupElements.length === 1) {\n            const highestLevel = Convert.GetInt(rollupElements[0], 'HighestLevel');\n\n            const rollupLevelElements = QueryHelper.GetImmediateChildNodesByTagName(rollupElements[0], 'RollupLevel');\n            const rollUpInfos = rollupLevelElements.map((e) => {\n                const level = Convert.GetInt(e, 'Level');\n                return new ShowPlan.RollupLevel(level);\n            });\n            stream.RollupInfo = new ShowPlan.RollupInfo(highestLevel, rollUpInfos);\n        }\n\n\n        return stream;\n    }\n\n    private static ParseDefinedValue(element: Element): ShowPlan.DefinedValue {\n        const definedValue = new ShowPlan.DefinedValue();\n\n        const columnReferenceElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ColumnReference');\n        if (columnReferenceElements.length > 0) {\n            definedValue.ColumnReference = columnReferenceElements.map(i => RelOpParser.ColumnReferenceParser.Parse(i));\n        }\n\n        const scalarOperatorElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'ScalarOperator');\n        if (scalarOperatorElements.length === 1) {\n            definedValue.ScalarOperator = RelOpParser.ScalarExpressionParser.ParseScalarType(scalarOperatorElements[0]);\n        }\n\n        return definedValue;\n    }\n\n    private static ParseTableScan(element: Element): ShowPlan.TableScan {\n        const ordered = Convert.GetBoolean(element, 'Ordered');\n        const object = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object')\n            .map(i => RelOpParser.ObjectParser.Parse(i));\n        const scan = new ShowPlan.TableScan(object, ordered);\n\n        const predicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Predicate');\n        if (predicateElements.length === 1) {\n            [scan.Predicate] = predicateElements.map(i => RelOpParser.ScalarExpressionParser.Parse(i));\n        }\n\n        const partitionIdElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'PartitionId');\n        if (partitionIdElement.length === 1) {\n            scan.PartitionId = RelOpParser.ColumnReferenceParser.Parse(partitionIdElement[0]);\n        }\n\n        const indexViewInfoElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'IndexedViewInfo');\n        if (indexViewInfoElement.length === 1) {\n            const objects = QueryHelper.GetImmediateChildNodesByTagName(indexViewInfoElement[0], 'Object');\n            scan.IndexedViewInfo = objects.map(i => RelOpParser.ObjectParser.Parse(i));\n        }\n\n        scan.ForcedIndex = Convert.GetBooleanOrUndefined(element, 'ForcedIndex');\n        scan.ForceScan = Convert.GetBooleanOrUndefined(element, 'ForceScan');\n        scan.NoExpandHint = Convert.GetBooleanOrUndefined(element, 'NoExpandHint');\n        scan.Storage = Convert.GetString(element, 'Storage') as ShowPlan.StorageType;\n\n        return scan;\n    }\n\n    private static parseSetPredicateElementType(element: Element): ShowPlan.SetPredicateElement {\n        const predicateElement = RelOpParser.ScalarExpressionParser.Parse(element) as ShowPlan.SetPredicateElement;\n        predicateElement.SetPredicateType = Convert.GetStringOrUndefined(element, 'SetPredicateType') as ShowPlan.SetPredicateType;\n\n        return predicateElement;\n    }\n\n    private static ParseUpdate(element: Element): ShowPlan.Update {\n        const objects = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object').map(i => RelOpParser.ObjectParser.Parse(i));\n        const update = new ShowPlan.Update(objects);\n        const setPredicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SetPredicate');\n        if (setPredicateElements.length > 0) {\n            update.SetPredicate = setPredicateElements.map(i => this.parseSetPredicateElementType(i));\n        }\n\n        const probeColumnElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ProbeColumn');\n        if (probeColumnElement.length === 1) {\n            const column = QueryHelper.GetImmediateChildNodesByTagName(probeColumnElement[0], 'ColumnReference');\n            update.ProbeColumn = RelOpParser.ColumnReferenceParser.Parse(column[0]);\n        }\n\n        const actionColumnElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ActionColumn');\n        if (actionColumnElement.length === 1) {\n            const column = QueryHelper.GetImmediateChildNodesByTagName(actionColumnElement[0], 'ColumnReference');\n            update.ActionColumn = RelOpParser.ColumnReferenceParser.Parse(column[0]);\n        }\n\n        const originalActionColumnElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'OriginalActionColumn');\n        if (originalActionColumnElement.length === 1) {\n            const column = QueryHelper.GetImmediateChildNodesByTagName(originalActionColumnElement[0], 'ColumnReference');\n            update.OriginalActionColumn = RelOpParser.ColumnReferenceParser.Parse(column[0]);\n        }\n\n        update.WithOrderedPrefetch = Convert.GetBooleanOrUndefined(element, 'WithOrderedPrefetch');\n        update.WithUnorderedPrefetch = Convert.GetBooleanOrUndefined(element, 'WithUnorderedPrefetch');\n        update.DMLRequestSort = Convert.GetBooleanOrUndefined(element, 'DMLRequestSort');\n\n        return update;\n    }\n\n    private static ParseCollapse(element: Element): ShowPlan.Collapse {\n        return new ShowPlan.Collapse(RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'GroupBy'));\n    }\n\n    private static ParseHash(element: Element): ShowPlan.Hash {\n        const hash = new ShowPlan.Hash();\n        hash.HashKeysBuild = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeysBuild');\n        hash.HashKeysProbe = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeysProbe');\n\n        const probeElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'ProbeResidual');\n        if (probeElement.length === 1) {\n            hash.ProbeResidual = RelOpParser.ScalarExpressionParser.Parse(probeElement[0]);\n        }\n\n        const starJoinElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'StarJoinInfo');\n        if (starJoinElement.length === 1) {\n            hash.StarJoinInfo = this.ParseStarJoinInfo(starJoinElement[0]);\n        }\n\n        return hash;\n    }\n\n    private static ParseFilterElement(filterElement: Element): ShowPlan.RelOpAction {\n        const startUpExpression = Convert.GetBoolean(filterElement, 'StartupExpression');\n        const predicateElement = QueryHelper.GetImmediateChildNodesByTagName(filterElement, 'Predicate');\n        const filter = new ShowPlan.Filter(startUpExpression, RelOpParser.ScalarExpressionParser.Parse(predicateElement[0]));\n        if (filterElement.tagName.toUpperCase() === 'ASSERT') {\n            filter.IsAssert = true;\n        }\n\n        return filter;\n    }\n\n    private static ParseComputeScalar(element: Element): ShowPlan.ComputeScalar {\n        const op = new ShowPlan.ComputeScalar();\n        op.ComputeSequence = Convert.GetBooleanOrUndefined(element, 'ComputeSequence');\n        return op;\n    }\n\n    private static ParseParallelism(element: Element): ShowPlan.Parallelism {\n        const parallelism = new ShowPlan.Parallelism();\n        parallelism.InRow = Convert.GetBooleanOrUndefined(element, 'InRow');\n        parallelism.LocalParallelism = Convert.GetBooleanOrUndefined(element, 'LocalParallelism');\n        parallelism.Remoting = Convert.GetBooleanOrUndefined(element, 'Remoting');\n        parallelism.PartitioningType = Convert.GetStringOrUndefined(element, 'PartitioningType') as ShowPlan.PartitionType;\n        parallelism.HashKeys = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'HashKeys');\n        parallelism.PartitionColumns = RelOpParser.ColumnReferenceParser.GetAllFromElement(element, 'PartitionColumns');\n\n        const orderByElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'OrderBy');\n        if (orderByElement.length > 0) {\n            const orderByColumnElements = QueryHelper.GetImmediateChildNodesByTagName(orderByElement[0], 'OrderByColumn');\n            const orderBy = new ShowPlan.OrderBy(orderByColumnElements.map(i => this.parseOrderByColumn(i)));\n            parallelism.OrderBy = orderBy;\n        }\n\n        const predicateElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'Predicate');\n        if (predicateElement.length > 0) {\n            parallelism.Predicate = RelOpParser.ScalarExpressionParser.Parse(predicateElement[0]);\n        }\n\n        return parallelism;\n    }\n\n    private static ParseTopElement(topElement: Element): ShowPlan.Top {\n        const isPercent = Convert.GetBooleanOrUndefined(topElement, 'IsPercent');\n        const rowCount = Convert.GetBooleanOrUndefined(topElement, 'RowCount');\n        const rows = Convert.GetIntOrUndefined(topElement, 'Rows');\n        const withTies = Convert.GetBooleanOrUndefined(topElement, ' WithTies');\n        const topExpressionElements = QueryHelper.GetImmediateChildNodesByTagName(topElement, 'TopExpression');\n\n        const top = new ShowPlan.Top();\n        top.IsPercent = isPercent;\n        top.RowCount = rowCount;\n        top.Rows = rows;\n        top.WithTies = withTies;\n\n        if (topExpressionElements.length === 1) {\n            top.TopExpression = RelOpParser.ScalarExpressionParser.Parse(topExpressionElements[0]);\n        }\n\n        return top;\n    }\n\n    private static ParseIndexScan(element: Element): ShowPlan.IndexScan {\n        const ordered = Convert.GetBoolean(element, 'Ordered');\n        const objectElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'Object');\n        const indexScan = new ShowPlan.IndexScan(objectElement.map(i => RelOpParser.ObjectParser.Parse(i)), ordered);\n\n        const seekPredicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'SeekPredicates');\n        if (seekPredicateElements.length === 1) {\n            indexScan.SeekPredicates = RelOpParser.SeekPredicateParser.ParseSeekPredicates(seekPredicateElements[0]);\n        }\n\n        const predicateElements = QueryHelper.GetImmediateChildNodesByTagName(element, 'Predicate');\n        if (predicateElements.length > 0) {\n            indexScan.Predicate = predicateElements.map(i => RelOpParser.ScalarExpressionParser.Parse(i));\n        }\n\n        const partitionIdElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'PartitionId');\n        if (partitionIdElement.length === 1) {\n            indexScan.PartitionId = RelOpParser.ColumnReferenceParser.Parse(partitionIdElement[0]);\n        }\n\n        const indexViewInfoElement = QueryHelper.GetImmediateChildNodesByTagName(element, 'IndexedViewInfo');\n        if (indexViewInfoElement.length === 1) {\n            const objects = QueryHelper.GetImmediateChildNodesByTagName(indexViewInfoElement[0], 'Object');\n            indexScan.IndexedViewInfo = objects.map(i => RelOpParser.ObjectParser.Parse(i));\n        }\n\n        indexScan.Lookup = Convert.GetBooleanOrUndefined(element, 'Lookup');\n        indexScan.ScanDirection = Convert.GetStringOrUndefined(element, 'ScanDirection') as ShowPlan.OrderType;\n        indexScan.ForcedIndex = Convert.GetBooleanOrUndefined(element, 'ForcedIndex');\n        indexScan.NoExpandHint = Convert.GetBooleanOrUndefined(element, 'NoExpandHint');\n        indexScan.Storage = Convert.GetStringOrUndefined(element, 'Storage') as ShowPlan.StorageType;\n        indexScan.DynamicSeek = Convert.GetBooleanOrUndefined(element, 'DynamicSeek');\n\n        return indexScan;\n    }\n\n    private static ParseStarJoinInfo(element: Element): ShowPlan.StarJoinInfo {\n        const operationType = Convert.GetString(element, 'OperationType') as ShowPlan.StarJoinInfoTypeOperationType;\n        const starJoin = new ShowPlan.StarJoinInfo(operationType);\n        starJoin.Root = Convert.GetBooleanOrUndefined(element, 'Root');\n\n        return starJoin;\n    }\n\n    /* remote types */\n    private static ApplyRemoteAttributes<T extends ShowPlan.Remote>(element: Element, creator: (() => T)): T {\n        const remote = creator();\n        remote.RemoteDestination = Convert.GetStringOrUndefined(element, 'RemoveDestination');\n        remote.RemoteSource = Convert.GetStringOrUndefined(element, 'RemoteSource');\n        remote.RemoteObject = Convert.GetStringOrUndefined(element, 'RemoteObject');\n        return remote;\n    }\n\n    private static ParseRemote(element: Element): ShowPlan.Remote {\n        return this.ApplyRemoteAttributes(element, () => new ShowPlan.Remote());\n    }\n\n    private static ParseRemoteRange(element: Element): ShowPlan.RemoteRange {\n        const range = this.ApplyRemoteAttributes<ShowPlan.RemoteRange>(element, () => new ShowPlan.RemoteRange());\n        range.SeekPredicates = QueryHelper.ParseSingleItem(element, 'SeekPredicates', i => RelOpParser.SeekPredicateParser.ParseSeekPredicates(i));\n        return range;\n    }\n\n    private static ParseRemoteFetch(element: Element): ShowPlan.RemoteFetch {\n        return this.ApplyRemoteAttributes(element, () => new ShowPlan.RemoteFetch());\n    }\n\n    private static ParseRemoteModify(element: Element): ShowPlan.RemoteModify {\n        const modify = this.ApplyRemoteAttributes(element, () => new ShowPlan.RemoteModify());\n        modify.SetPredicate = QueryHelper.ParseSingleItem(element, 'SetPredicate', i => RelOpParser.ScalarExpressionParser.Parse(i));\n        return modify;\n    }\n\n    private static ParseRemoteQuery(element: Element): ShowPlan.RemoteQuery {\n        const query = this.ApplyRemoteAttributes(element, () => new ShowPlan.RemoteQuery());\n        query.RemoteQuery = Convert.GetStringOrUndefined(element, 'RemoteQuery');\n        return query;\n    }\n\n    private static ParsePut(element: Element): ShowPlan.Put {\n        const query = this.ApplyRemoteAttributes(element, () => new ShowPlan.Put());\n        query.RemoteQuery = Convert.GetStringOrUndefined(element, 'RemoteQuery');\n        query.ShuffleColumn = Convert.GetStringOrUndefined(element, 'ShuffleColumn');\n        query.ShuffleType = Convert.GetStringOrUndefined(element, 'ShuffleType');\n        return query;\n    }\n}\n\nexport default RelOpParser;\n","import * as ShowPlan from './showplan';\nimport Convert from './convert';\nimport QueryHelper from './query-helper';\nimport ColumnReferenceParser from './column-reference-parser';\nimport MissingIndexParser from './missing-index-parser';\nimport MetaInfoParser from './meta-info-parser';\nimport WarningsParser from './warnings-parser';\nimport RelOpParser from './rel-op-parser';\n\nclass QueryPlanParser {\n    private static MetaInfoParser = new MetaInfoParser();\n\n    private static WarningsParser = new WarningsParser();\n\n    private static MissingIndexParser = new MissingIndexParser();\n\n    private static ColumnReferenceParser = new ColumnReferenceParser();\n\n    public static Parse(queryPlanElement: Element): ShowPlan.QueryPlan {\n        const relOpElements = QueryHelper.GetImmediateChildNodesByTagName(queryPlanElement, 'RelOp');\n        if (relOpElements.length !== 1) {\n            throw new Error('RelOp not found in query plan');\n        }\n\n        const relOp = RelOpParser.ParseRelOp(undefined, relOpElements[0]);\n        const queryplan = new ShowPlan.QueryPlan(relOp);\n\n        queryplan.MissingIndexes = QueryHelper.ParseSingleItem(queryPlanElement, 'MissingIndexes', i => QueryPlanParser.MissingIndexParser.ParseMissingIndexes(i));\n        queryplan.ThreadStat = QueryHelper.ParseSingleItem(queryPlanElement, 'ThreadStat', i => QueryPlanParser.MetaInfoParser.ParseThreadStat(i));\n        queryplan.MemoryGrant = Convert.GetIntOrUndefined(queryPlanElement, 'MemoryGrant');\n        queryplan.MemoryGrantInfo = QueryHelper.ParseSingleItem(queryPlanElement, 'MemoryGrantInfo', i => QueryPlanParser.MetaInfoParser.ParseMemoryGrantInfo(i));\n        queryplan.OptimizerHardwareDependentProperties = QueryHelper.ParseSingleItem(queryPlanElement, 'OptimizerHardwareDependentProperties', i => QueryPlanParser.MetaInfoParser.ParseOptimizerHardwareDependentProperties(i));\n        queryplan.OptimizerStatsUsage = QueryHelper.ParseSingleItem(queryPlanElement, 'OptimizerStatsUsage', i => QueryPlanParser.MetaInfoParser.ParseOptimizerStatsUsage(i));\n        queryplan.WaitStats = QueryHelper.ParseSingleItem(queryPlanElement, 'WaitStats', i => QueryPlanParser.MetaInfoParser.ParseWaitStats(i));\n        queryplan.QueryTimeStats = QueryHelper.ParseSingleItem(queryPlanElement, 'QueryTimeStats', i => QueryPlanParser.MetaInfoParser.ParseQueryTimeStats(i));\n        queryplan.Warnings = QueryHelper.ParseSingleItem(queryPlanElement, 'Warnings', i => QueryPlanParser.WarningsParser.ParseWarnings(i));\n        queryplan.CachedPlanSize = Convert.GetIntOrUndefined(queryPlanElement, 'CachedPlanSize');\n        queryplan.ParameterList = QueryPlanParser.ColumnReferenceParser.GetAllFromElement(queryPlanElement, 'ParameterList');\n        queryplan.DegreeOfParallelism = Convert.GetIntOrUndefined(queryPlanElement, 'DegreeOfParallelism');\n        return queryplan;\n    }\n}\n\nexport default QueryPlanParser;\n","import * as ShowPlan from './showplan';\nimport QueryPlanParser from './query-plan-parser';\n\nclass StatementParser {\n    public ParseUseDb(element: Element): ShowPlan.StmtUseDb {\n        const database = element.getAttribute('Database') || '(unknown)';\n        return new ShowPlan.StmtUseDb(database);\n    }\n\n    public ParseStmtSimple(element: Element): ShowPlan.StmtSimple {\n        const statement = new ShowPlan.StmtSimple();\n        const queryPlan = element.getElementsByTagName('QueryPlan');\n        const udf = element.getElementsByTagName('UDF');\n        const storedProc = element.getElementsByTagName('StoredProc');\n\n        if (queryPlan.length > 0) {\n            statement.QueryPlan = QueryPlanParser.Parse(queryPlan[0] as Element);\n        }\n        if (udf.length > 0) { statement.UDF = this.ParseUDF(); }\n        if (storedProc.length > 0) { statement.StoredProc = this.ParseStoredProc(); }\n        return statement;\n    }\n\n    private ParseUDF(): ShowPlan.FunctionPlan[] {\n        return [];\n    }\n\n    private ParseStoredProc(): ShowPlan.FunctionPlan | undefined {\n        return undefined;\n    }\n}\n\nexport default StatementParser;\n","import { DOMParser } from 'xmldom';\nimport * as ShowPlan from './showplan';\nimport Convert from './convert';\nimport StatementParser from './statement-parser';\n\nclass ShowPlanParser {\n    private static StatementParser = new StatementParser();\n\n    public static ForOnlyElementsInNodes<T>(\n        nodes: HTMLCollectionOf<Element>,\n        action: (node: Element) => T | undefined,\n    ): T[] {\n        const results: T[] = [];\n        let resultsIndex = 0;\n\n        for (let nodeIndex = 0; nodeIndex < nodes.length; nodeIndex += 1) {\n            const { childNodes } = nodes[nodeIndex];\n\n            for (let childNodeIndex = 0; childNodeIndex < childNodes.length; childNodeIndex += 1) {\n                const childNode = childNodes[childNodeIndex];\n                if (childNode.nodeType === 1) {\n                    const result = action(childNode as Element);\n                    if (result !== undefined) {\n                        results[resultsIndex] = result;\n                        resultsIndex += 1;\n                    }\n                }\n            }\n        }\n\n        return results;\n    }\n\n    public static BuildRoot(\n        doc: Document,\n        batches: ShowPlan.ShowPlanXMLTypeBatchSequenceTypeBatch[],\n    ): ShowPlan.ShowPlanXML {\n        const version = doc.documentElement.getAttribute('Version') as string;\n        const build = doc.documentElement.getAttribute('Build') as string;\n        return new ShowPlan.ShowPlanXML(build, false, version, batches);\n    }\n\n    public static GetBatchFromElement(batchElement: Element): ShowPlan.BaseStmtInfo[] {\n        const statementElements = batchElement.getElementsByTagName('Statements');\n\n        const results = ShowPlanParser.ForOnlyElementsInNodes(statementElements, (node) => {\n            let statement: ShowPlan.BaseStmtInfo | undefined;\n            switch (node.nodeName) {\n                case 'StmtSimple':\n                    statement = ShowPlanParser.StatementParser.ParseStmtSimple(node);\n                    break;\n                case 'StmtUseDb':\n                    statement = ShowPlanParser.StatementParser.ParseUseDb(node);\n                    break;\n                default:\n                    statement = new ShowPlan.BaseStmtInfo();\n            }\n\n            statement.BatchSqlHandle = Convert.GetStringOrUndefined(node, 'BatchSqlHandle');\n            statement.CardinalityEstimationModelVersion = Convert.GetStringOrUndefined(\n                node,\n                'CardinalityEstimationModelVersion',\n            );\n            statement.DatabaseContextSettingsId = Convert.GetIntOrUndefined(node, 'DatabaseContextSettingsId');\n            statement.ParameterizedPlanHandle = Convert.GetStringOrUndefined(node, 'ParameterizedPlanHandle');\n            statement.ParameterizedText = Convert.GetStringOrUndefined(node, 'ParameterizedText');\n            statement.ParentObjectId = Convert.GetIntOrUndefined(node, 'ParentObjectId');\n            statement.PlanGuideDB = Convert.GetStringOrUndefined(node, 'PlanGuideDB');\n            statement.PlanGuideName = Convert.GetStringOrUndefined(node, 'PlanGuideName');\n            statement.QueryHash = Convert.GetStringOrUndefined(node, 'QueryHash');\n            statement.QueryPlanHash = Convert.GetStringOrUndefined(node, 'QueryPlanHash');\n            statement.RetrievedFromCache = Convert.GetStringOrUndefined(node, 'RetrievedFromCache');\n            statement.SecurityPolicyApplied = Convert.GetBooleanOrUndefined(node, 'SecurityPolicyApplied');\n            statement.StatementCompId = Convert.GetIntOrUndefined(node, 'StatementCompId');\n            statement.StatementEstRows = Convert.GetIntOrUndefined(node, 'StatementEstRows');\n            statement.StatementId = Convert.GetIntOrUndefined(node, 'StatementId');\n            statement.StatementOptmEarlyAbortReason = Convert.GetStringOrUndefined(\n                node,\n                'StatementOptmEarlyAbortReason',\n            ) as ShowPlan.BaseStmtInfoTypeStatementOptmEarlyAbortReason;\n            statement.StatementOptmLevel = Convert.GetStringOrUndefined(node, 'StatementOptmLevel');\n            statement.StatementParameterizationType = Convert.GetIntOrUndefined(\n                node,\n                'StatementParameterizationType',\n            );\n            statement.StatementSqlHandle = Convert.GetStringOrUndefined(node, 'StatementSqlHandle');\n            statement.StatementSubTreeCost = Convert.GetFloatOrUndefined(node, 'StatementSubTreeCost');\n            statement.StatementText = Convert.GetStringOrUndefined(node, 'StatementText');\n            statement.StatementType = Convert.GetStringOrUndefined(node, 'StatementType');\n            statement.TemplatePlanGuideDB = Convert.GetStringOrUndefined(node, 'TemplatePlanGuideDB');\n            statement.TemplatePlanGuideName = Convert.GetStringOrUndefined(node, 'TemplatePlanGuideName');\n\n            const setOptions = node.getElementsByTagName('StatementSetOptions');\n            if (setOptions.length === 1) {\n                statement.StatementSetOptions = new ShowPlan.SetOptions(\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'ANSI_NULLS'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'ANSI_PADDING'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'ANSI_WARNINGS'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'ARITHABORT'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'CONCAT_NULL_YIELDS_NULL'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'NUMERIC_ROUNDABORT'),\n                    Convert.GetBooleanOrUndefined(setOptions[0], 'QUOTED_IDENTIFIER'),\n                );\n            }\n\n            return statement;\n        });\n\n        return results;\n    }\n\n    public static Parse(s: string): ShowPlan.ShowPlanXML {\n    // create a new parser that just ignores all the errors. we'll check after the fact\n    // whether or not it parsed a SHOWPLAN\n        const doc = new DOMParser(\n            { errorHandler: { warning(w) { throw Error(w); } } },\n        ).parseFromString(s, 'text/xml');\n        if (doc.documentElement === null) {\n            throw new Error('Could not parse XML for showplan');\n        }\n        if (doc.documentElement.namespaceURI !== 'http://schemas.microsoft.com/sqlserver/2004/07/showplan') {\n            throw new Error(`Invalid XML namespace. Received namespace ${doc.documentElement.namespaceURI}`);\n        }\n\n        const batchElements = doc.documentElement.getElementsByTagName('Batch');\n\n        const statements: ShowPlan.BaseStmtInfo[] = [];\n        for (let count = 0; count < batchElements.length; count += 1) {\n            const batchElement = batchElements.item(count);\n            if (batchElement !== null) {\n                const batchStatements = this.GetBatchFromElement(batchElement);\n                Array.prototype.push.apply(statements, batchStatements);\n            }\n        }\n\n        const batch = new ShowPlan.ShowPlanXMLTypeBatchSequenceTypeBatch(statements);\n        return ShowPlanParser.BuildRoot(doc, [batch]);\n    }\n}\n\nexport default ShowPlanParser;\n","//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\r\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\r\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]///\\u10000-\\uEFFFF\r\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\r\nvar tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\\:'+nameStartChar.source+nameChar.source+'*)?$');\r\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\r\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\r\n\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\nvar S_TAG = 0;//tag name offerring\r\nvar S_ATTR = 1;//attr name offerring \r\nvar S_ATTR_SPACE=2;//attr name end and space offer\r\nvar S_EQ = 3;//=space?\r\nvar S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)\r\nvar S_ATTR_END = 5;//attr value end and no space(quot end)\r\nvar S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)\r\nvar S_TAG_CLOSE = 7;//closed el<el />\r\n\r\nfunction XMLReader(){\r\n\t\r\n}\r\n\r\nXMLReader.prototype = {\r\n\tparse:function(source,defaultNSMap,entityMap){\r\n\t\tvar domBuilder = this.domBuilder;\r\n\t\tdomBuilder.startDocument();\r\n\t\t_copy(defaultNSMap ,defaultNSMap = {})\r\n\t\tparse(source,defaultNSMap,entityMap,\r\n\t\t\t\tdomBuilder,this.errorHandler);\r\n\t\tdomBuilder.endDocument();\r\n\t}\r\n}\r\nfunction parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){\r\n\tfunction fixedFromCharCode(code) {\r\n\t\t// String.prototype.fromCharCode does not supports\r\n\t\t// > 2 bytes unicode chars directly\r\n\t\tif (code > 0xffff) {\r\n\t\t\tcode -= 0x10000;\r\n\t\t\tvar surrogate1 = 0xd800 + (code >> 10)\r\n\t\t\t\t, surrogate2 = 0xdc00 + (code & 0x3ff);\r\n\r\n\t\t\treturn String.fromCharCode(surrogate1, surrogate2);\r\n\t\t} else {\r\n\t\t\treturn String.fromCharCode(code);\r\n\t\t}\r\n\t}\r\n\tfunction entityReplacer(a){\r\n\t\tvar k = a.slice(1,-1);\r\n\t\tif(k in entityMap){\r\n\t\t\treturn entityMap[k]; \r\n\t\t}else if(k.charAt(0) === '#'){\r\n\t\t\treturn fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))\r\n\t\t}else{\r\n\t\t\terrorHandler.error('entity not found:'+a);\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\tfunction appendText(end){//has some bugs\r\n\t\tif(end>start){\r\n\t\t\tvar xt = source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\tlocator&&position(start);\r\n\t\t\tdomBuilder.characters(xt,0,end-start);\r\n\t\t\tstart = end\r\n\t\t}\r\n\t}\r\n\tfunction position(p,m){\r\n\t\twhile(p>=lineEnd && (m = linePattern.exec(source))){\r\n\t\t\tlineStart = m.index;\r\n\t\t\tlineEnd = lineStart + m[0].length;\r\n\t\t\tlocator.lineNumber++;\r\n\t\t\t//console.log('line++:',locator,startPos,endPos)\r\n\t\t}\r\n\t\tlocator.columnNumber = p-lineStart+1;\r\n\t}\r\n\tvar lineStart = 0;\r\n\tvar lineEnd = 0;\r\n\tvar linePattern = /.*(?:\\r\\n?|\\n)|.*$/g\r\n\tvar locator = domBuilder.locator;\r\n\t\r\n\tvar parseStack = [{currentNSMap:defaultNSMapCopy}]\r\n\tvar closeMap = {};\r\n\tvar start = 0;\r\n\twhile(true){\r\n\t\ttry{\r\n\t\t\tvar tagStart = source.indexOf('<',start);\r\n\t\t\tif(tagStart<0){\r\n\t\t\t\tif(!source.substr(start).match(/^\\s*$/)){\r\n\t\t\t\t\tvar doc = domBuilder.doc;\r\n\t    \t\t\tvar text = doc.createTextNode(source.substr(start));\r\n\t    \t\t\tdoc.appendChild(text);\r\n\t    \t\t\tdomBuilder.currentElement = text;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(tagStart>start){\r\n\t\t\t\tappendText(tagStart);\r\n\t\t\t}\r\n\t\t\tswitch(source.charAt(tagStart+1)){\r\n\t\t\tcase '/':\r\n\t\t\t\tvar end = source.indexOf('>',tagStart+3);\r\n\t\t\t\tvar tagName = source.substring(tagStart+2,end);\r\n\t\t\t\tvar config = parseStack.pop();\r\n\t\t\t\tif(end<0){\r\n\t\t\t\t\t\r\n\t        \t\ttagName = source.substring(tagStart+2).replace(/[\\s<].*/,'');\r\n\t        \t\t//console.error('#@@@@@@'+tagName)\r\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' is not complete:'+config.tagName);\r\n\t        \t\tend = tagStart+1+tagName.length;\r\n\t        \t}else if(tagName.match(/\\s</)){\r\n\t        \t\ttagName = tagName.replace(/[\\s<].*/,'');\r\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' maybe not complete');\r\n\t        \t\tend = tagStart+1+tagName.length;\r\n\t\t\t\t}\r\n\t\t\t\t//console.error(parseStack.length,parseStack)\r\n\t\t\t\t//console.error(config);\r\n\t\t\t\tvar localNSMap = config.localNSMap;\r\n\t\t\t\tvar endMatch = config.tagName == tagName;\r\n\t\t\t\tvar endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()\r\n\t\t        if(endIgnoreCaseMach){\r\n\t\t        \tdomBuilder.endElement(config.uri,config.localName,tagName);\r\n\t\t\t\t\tif(localNSMap){\r\n\t\t\t\t\t\tfor(var prefix in localNSMap){\r\n\t\t\t\t\t\t\tdomBuilder.endPrefixMapping(prefix) ;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!endMatch){\r\n\t\t            \terrorHandler.fatalError(\"end tag name: \"+tagName+' is not match the current start tagName:'+config.tagName );\r\n\t\t\t\t\t}\r\n\t\t        }else{\r\n\t\t        \tparseStack.push(config)\r\n\t\t        }\r\n\t\t\t\t\r\n\t\t\t\tend++;\r\n\t\t\t\tbreak;\r\n\t\t\t\t// end elment\r\n\t\t\tcase '?':// <?...?>\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseInstruction(source,tagStart,domBuilder);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '!':// <!doctype,<![CDATA,<!--\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseDCC(source,tagStart,domBuilder,errorHandler);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tvar el = new ElementAttributes();\r\n\t\t\t\tvar currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\t\t\t\t//elStartEnd\r\n\t\t\t\tvar end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);\r\n\t\t\t\tvar len = el.length;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){\r\n\t\t\t\t\tel.closed = true;\r\n\t\t\t\t\tif(!entityMap.nbsp){\r\n\t\t\t\t\t\terrorHandler.warning('unclosed xml attribute');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(locator && len){\r\n\t\t\t\t\tvar locator2 = copyLocator(locator,{});\r\n\t\t\t\t\t//try{//attribute position fixed\r\n\t\t\t\t\tfor(var i = 0;i<len;i++){\r\n\t\t\t\t\t\tvar a = el[i];\r\n\t\t\t\t\t\tposition(a.offset);\r\n\t\t\t\t\t\ta.locator = copyLocator(locator,{});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//}catch(e){console.error('@@@@@'+e)}\r\n\t\t\t\t\tdomBuilder.locator = locator2\r\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\r\n\t\t\t\t\t\tparseStack.push(el)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdomBuilder.locator = locator;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\r\n\t\t\t\t\t\tparseStack.push(el)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){\r\n\t\t\t\t\tend = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tend++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}catch(e){\r\n\t\t\terrorHandler.error('element parse error: '+e)\r\n\t\t\t//errorHandler.error('element parse error: '+e);\r\n\t\t\tend = -1;\r\n\t\t\t//throw e;\r\n\t\t}\r\n\t\tif(end>start){\r\n\t\t\tstart = end;\r\n\t\t}else{\r\n\t\t\t//TODO: 这里有可能sax回退，有位置错误风险\r\n\t\t\tappendText(Math.max(tagStart,start)+1);\r\n\t\t}\r\n\t}\r\n}\r\nfunction copyLocator(f,t){\r\n\tt.lineNumber = f.lineNumber;\r\n\tt.columnNumber = f.columnNumber;\r\n\treturn t;\r\n}\r\n\r\n/**\r\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){\r\n\tvar attrName;\r\n\tvar value;\r\n\tvar p = ++start;\r\n\tvar s = S_TAG;//status\r\n\twhile(true){\r\n\t\tvar c = source.charAt(p);\r\n\t\tswitch(c){\r\n\t\tcase '=':\r\n\t\t\tif(s === S_ATTR){//attrName\r\n\t\t\t\tattrName = source.slice(start,p);\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else if(s === S_ATTR_SPACE){\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: equal must after attrName or space after attrName\r\n\t\t\t\tthrow new Error('attribute equal must after attrName');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '\\'':\r\n\t\tcase '\"':\r\n\t\t\tif(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\r\n\t\t\t\t){//equal\r\n\t\t\t\tif(s === S_ATTR){\r\n\t\t\t\t\terrorHandler.warning('attribute value must after \"=\"')\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t}\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\tp = source.indexOf(c,start)\r\n\t\t\t\tif(p>0){\r\n\t\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\tel.add(attrName,value,start-1);\r\n\t\t\t\t\ts = S_ATTR_END;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//fatalError: no end quot match\r\n\t\t\t\t\tthrow new Error('attribute value no end \\''+c+'\\' match');\r\n\t\t\t\t}\r\n\t\t\t}else if(s == S_ATTR_NOQUOT_VALUE){\r\n\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t//console.log(attrName,value,start,p)\r\n\t\t\t\tel.add(attrName,value,start);\r\n\t\t\t\t//console.dir(el)\r\n\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+')!!');\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\ts = S_ATTR_END\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: no equal before\r\n\t\t\t\tthrow new Error('attribute value must after \"=\"');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '/':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_ATTR_END:\r\n\t\t\tcase S_TAG_SPACE:\r\n\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\ts =S_TAG_CLOSE;\r\n\t\t\t\tel.closed = true;\r\n\t\t\tcase S_ATTR_NOQUOT_VALUE:\r\n\t\t\tcase S_ATTR:\r\n\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\tbreak;\r\n\t\t\t//case S_EQ:\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"attribute invalid close char('/')\")\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase ''://end document\r\n\t\t\t//throw new Error('unexpected end of input')\r\n\t\t\terrorHandler.error('unexpected end of input');\r\n\t\t\tif(s == S_TAG){\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\t}\r\n\t\t\treturn p;\r\n\t\tcase '>':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_ATTR_END:\r\n\t\t\tcase S_TAG_SPACE:\r\n\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\tbreak;//normal\r\n\t\t\tcase S_ATTR_NOQUOT_VALUE://Compatible state\r\n\t\t\tcase S_ATTR:\r\n\t\t\t\tvalue = source.slice(start,p);\r\n\t\t\t\tif(value.slice(-1) === '/'){\r\n\t\t\t\t\tel.closed  = true;\r\n\t\t\t\t\tvalue = value.slice(0,-1)\r\n\t\t\t\t}\r\n\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\tif(s === S_ATTR_SPACE){\r\n\t\t\t\t\tvalue = attrName;\r\n\t\t\t\t}\r\n\t\t\t\tif(s == S_ATTR_NOQUOT_VALUE){\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){\r\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tel.add(value,value,start)\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase S_EQ:\r\n\t\t\t\tthrow new Error('attribute value missed!!');\r\n\t\t\t}\r\n//\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\r\n\t\t\treturn p;\r\n\t\t/*xml space '\\x20' | #x9 | #xD | #xA; */\r\n\t\tcase '\\u0080':\r\n\t\t\tc = ' ';\r\n\t\tdefault:\r\n\t\t\tif(c<= ' '){//space\r\n\t\t\t\tswitch(s){\r\n\t\t\t\tcase S_TAG:\r\n\t\t\t\t\tel.setTagName(source.slice(start,p));//tagName\r\n\t\t\t\t\ts = S_TAG_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR:\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t\ts = S_ATTR_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR_NOQUOT_VALUE:\r\n\t\t\t\t\tvar value = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value,start)\r\n\t\t\t\tcase S_ATTR_END:\r\n\t\t\t\t\ts = S_TAG_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case S_TAG_SPACE:\r\n\t\t\t\t//case S_EQ:\r\n\t\t\t\t//case S_ATTR_SPACE:\r\n\t\t\t\t//\tvoid();break;\r\n\t\t\t\t//case S_TAG_CLOSE:\r\n\t\t\t\t\t//ignore warning\r\n\t\t\t\t}\r\n\t\t\t}else{//not space\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\n\t\t\t\tswitch(s){\r\n\t\t\t\t//case S_TAG:void();break;\r\n\t\t\t\t//case S_ATTR:void();break;\r\n\t\t\t\t//case S_ATTR_NOQUOT_VALUE:void();break;\r\n\t\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\t\tvar tagName =  el.tagName;\r\n\t\t\t\t\tif(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){\r\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tel.add(attrName,attrName,start);\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR_END:\r\n\t\t\t\t\terrorHandler.warning('attribute space is required\"'+attrName+'\"!!')\r\n\t\t\t\tcase S_TAG_SPACE:\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_EQ:\r\n\t\t\t\t\ts = S_ATTR_NOQUOT_VALUE;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\t\tthrow new Error(\"elements closed character '/' and '>' must be connected to\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}//end outer switch\r\n\t\t//console.log('p++',p)\r\n\t\tp++;\r\n\t}\r\n}\r\n/**\r\n * @return true if has new namespace define\r\n */\r\nfunction appendElement(el,domBuilder,currentNSMap){\r\n\tvar tagName = el.tagName;\r\n\tvar localNSMap = null;\r\n\t//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\tvar a = el[i];\r\n\t\tvar qName = a.qName;\r\n\t\tvar value = a.value;\r\n\t\tvar nsp = qName.indexOf(':');\r\n\t\tif(nsp>0){\r\n\t\t\tvar prefix = a.prefix = qName.slice(0,nsp);\r\n\t\t\tvar localName = qName.slice(nsp+1);\r\n\t\t\tvar nsPrefix = prefix === 'xmlns' && localName\r\n\t\t}else{\r\n\t\t\tlocalName = qName;\r\n\t\t\tprefix = null\r\n\t\t\tnsPrefix = qName === 'xmlns' && ''\r\n\t\t}\r\n\t\t//can not set prefix,because prefix !== ''\r\n\t\ta.localName = localName ;\r\n\t\t//prefix == null for no ns prefix attribute \r\n\t\tif(nsPrefix !== false){//hack!!\r\n\t\t\tif(localNSMap == null){\r\n\t\t\t\tlocalNSMap = {}\r\n\t\t\t\t//console.log(currentNSMap,0)\r\n\t\t\t\t_copy(currentNSMap,currentNSMap={})\r\n\t\t\t\t//console.log(currentNSMap,1)\r\n\t\t\t}\r\n\t\t\tcurrentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\r\n\t\t\ta.uri = 'http://www.w3.org/2000/xmlns/'\r\n\t\t\tdomBuilder.startPrefixMapping(nsPrefix, value) \r\n\t\t}\r\n\t}\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\ta = el[i];\r\n\t\tvar prefix = a.prefix;\r\n\t\tif(prefix){//no prefix attribute has no namespace\r\n\t\t\tif(prefix === 'xml'){\r\n\t\t\t\ta.uri = 'http://www.w3.org/XML/1998/namespace';\r\n\t\t\t}if(prefix !== 'xmlns'){\r\n\t\t\t\ta.uri = currentNSMap[prefix || '']\r\n\t\t\t\t\r\n\t\t\t\t//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar nsp = tagName.indexOf(':');\r\n\tif(nsp>0){\r\n\t\tprefix = el.prefix = tagName.slice(0,nsp);\r\n\t\tlocalName = el.localName = tagName.slice(nsp+1);\r\n\t}else{\r\n\t\tprefix = null;//important!!\r\n\t\tlocalName = el.localName = tagName;\r\n\t}\r\n\t//no prefix element has default namespace\r\n\tvar ns = el.uri = currentNSMap[prefix || ''];\r\n\tdomBuilder.startElement(ns,localName,tagName,el);\r\n\t//endPrefixMapping and startPrefixMapping have not any help for dom builder\r\n\t//localNSMap = null\r\n\tif(el.closed){\r\n\t\tdomBuilder.endElement(ns,localName,tagName);\r\n\t\tif(localNSMap){\r\n\t\t\tfor(prefix in localNSMap){\r\n\t\t\t\tdomBuilder.endPrefixMapping(prefix) \r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tel.currentNSMap = currentNSMap;\r\n\t\tel.localNSMap = localNSMap;\r\n\t\t//parseStack.push(el);\r\n\t\treturn true;\r\n\t}\r\n}\r\nfunction parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){\r\n\tif(/^(?:script|textarea)$/i.test(tagName)){\r\n\t\tvar elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);\r\n\t\tvar text = source.substring(elStartEnd+1,elEndStart);\r\n\t\tif(/[&<]/.test(text)){\r\n\t\t\tif(/^script$/i.test(tagName)){\r\n\t\t\t\t//if(!/\\]\\]>/.test(text)){\r\n\t\t\t\t\t//lexHandler.startCDATA();\r\n\t\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\t\t//lexHandler.endCDATA();\r\n\t\t\t\t\treturn elEndStart;\r\n\t\t\t\t//}\r\n\t\t\t}//}else{//text area\r\n\t\t\t\ttext = text.replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\treturn elEndStart;\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn elStartEnd+1;\r\n}\r\nfunction fixSelfClosed(source,elStartEnd,tagName,closeMap){\r\n\t//if(tagName in closeMap){\r\n\tvar pos = closeMap[tagName];\r\n\tif(pos == null){\r\n\t\t//console.log(tagName)\r\n\t\tpos =  source.lastIndexOf('</'+tagName+'>')\r\n\t\tif(pos<elStartEnd){//忘记闭合\r\n\t\t\tpos = source.lastIndexOf('</'+tagName)\r\n\t\t}\r\n\t\tcloseMap[tagName] =pos\r\n\t}\r\n\treturn pos<elStartEnd;\r\n\t//} \r\n}\r\nfunction _copy(source,target){\r\n\tfor(var n in source){target[n] = source[n]}\r\n}\r\nfunction parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'\r\n\tvar next= source.charAt(start+2)\r\n\tswitch(next){\r\n\tcase '-':\r\n\t\tif(source.charAt(start + 3) === '-'){\r\n\t\t\tvar end = source.indexOf('-->',start+4);\r\n\t\t\t//append comment source.substring(4,end)//<!--\r\n\t\t\tif(end>start){\r\n\t\t\t\tdomBuilder.comment(source,start+4,end-start-4);\r\n\t\t\t\treturn end+3;\r\n\t\t\t}else{\r\n\t\t\t\terrorHandler.error(\"Unclosed comment\");\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\tdefault:\r\n\t\tif(source.substr(start+3,6) == 'CDATA['){\r\n\t\t\tvar end = source.indexOf(']]>',start+9);\r\n\t\t\tdomBuilder.startCDATA();\r\n\t\t\tdomBuilder.characters(source,start+9,end-start-9);\r\n\t\t\tdomBuilder.endCDATA() \r\n\t\t\treturn end+3;\r\n\t\t}\r\n\t\t//<!DOCTYPE\r\n\t\t//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) \r\n\t\tvar matchs = split(source,start);\r\n\t\tvar len = matchs.length;\r\n\t\tif(len>1 && /!doctype/i.test(matchs[0][0])){\r\n\t\t\tvar name = matchs[1][0];\r\n\t\t\tvar pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]\r\n\t\t\tvar sysid = len>4 && matchs[4][0];\r\n\t\t\tvar lastMatch = matchs[len-1]\r\n\t\t\tdomBuilder.startDTD(name,pubid && pubid.replace(/^(['\"])(.*?)\\1$/,'$2'),\r\n\t\t\t\t\tsysid && sysid.replace(/^(['\"])(.*?)\\1$/,'$2'));\r\n\t\t\tdomBuilder.endDTD();\r\n\t\t\t\r\n\t\t\treturn lastMatch.index+lastMatch[0].length\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\n\r\nfunction parseInstruction(source,start,domBuilder){\r\n\tvar end = source.indexOf('?>',start);\r\n\tif(end){\r\n\t\tvar match = source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\r\n\t\tif(match){\r\n\t\t\tvar len = match[0].length;\r\n\t\t\tdomBuilder.processingInstruction(match[1], match[2]) ;\r\n\t\t\treturn end+2;\r\n\t\t}else{//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * @param source\r\n */\r\nfunction ElementAttributes(source){\r\n\t\r\n}\r\nElementAttributes.prototype = {\r\n\tsetTagName:function(tagName){\r\n\t\tif(!tagNamePattern.test(tagName)){\r\n\t\t\tthrow new Error('invalid tagName:'+tagName)\r\n\t\t}\r\n\t\tthis.tagName = tagName\r\n\t},\r\n\tadd:function(qName,value,offset){\r\n\t\tif(!tagNamePattern.test(qName)){\r\n\t\t\tthrow new Error('invalid attribute:'+qName)\r\n\t\t}\r\n\t\tthis[this.length++] = {qName:qName,value:value,offset:offset}\r\n\t},\r\n\tlength:0,\r\n\tgetLocalName:function(i){return this[i].localName},\r\n\tgetLocator:function(i){return this[i].locator},\r\n\tgetQName:function(i){return this[i].qName},\r\n\tgetURI:function(i){return this[i].uri},\r\n\tgetValue:function(i){return this[i].value}\r\n//\t,getIndex:function(uri, localName)){\r\n//\t\tif(localName){\r\n//\t\t\t\r\n//\t\t}else{\r\n//\t\t\tvar qName = uri\r\n//\t\t}\r\n//\t},\r\n//\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\r\n//\tgetType:function(uri,localName){}\r\n//\tgetType:function(i){},\r\n}\r\n\r\n\r\n\r\n\r\nfunction _set_proto_(thiz,parent){\r\n\tthiz.__proto__ = parent;\r\n\treturn thiz;\r\n}\r\nif(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){\r\n\t_set_proto_ = function(thiz,parent){\r\n\t\tfunction p(){};\r\n\t\tp.prototype = parent;\r\n\t\tp = new p();\r\n\t\tfor(parent in thiz){\r\n\t\t\tp[parent] = thiz[parent];\r\n\t\t}\r\n\t\treturn p;\r\n\t}\r\n}\r\n\r\nfunction split(source,start){\r\n\tvar match;\r\n\tvar buf = [];\r\n\tvar reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\r\n\treg.lastIndex = start;\r\n\treg.exec(source);//skip <\r\n\twhile(match = reg.exec(source)){\r\n\t\tbuf.push(match);\r\n\t\tif(match[1])return buf;\r\n\t}\r\n}\r\n\r\nexports.XMLReader = XMLReader;\r\n\r\n"],"sourceRoot":""}